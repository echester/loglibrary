
@inproceedings{popoff_high-efficiency_2016,
	title = {High-efficiency logarithmic number unit design based on an improved cotransformation scheme},
	abstract = {The logarithmic number system (LNS) has always been an interesting alternative for floating point calculations since the implementation of several arithmetic operations such as divisions, exponentiations and square-roots, which are required for computationally intensive nonlinear functions, is greatly simplified in the logarithmic space. However, additions and subtractions become nonlinear operations that have to be approximated using polynomials for area efficient realizations. A particular challenge is the accuracy within the so-called critical region which is encountered for subtractions where the difference between the operands is close to zero. In the literature, several arithmetic cotransformations that reduce the overhead of approximating these operations have been presented. Even so, the main problem with practical LNS realizations is the area overhead when compared to standard FPUs with comparable accuracy. In this paper, we propose a highly hardware-efficient novel cotransformation concept that not only reduces the area requirements by up to 35\% when compared to the state-of-the-art, but also allows the LNU to calculate single cycle logarithms and exponentiations within the same datapath. We present comprehensive results for a complete processing system that includes the LNU and an OpenRISC based core in 65nm, and 28nm technologies. We compare this implementation with a system using a standard IEEE compliant FPU and show that the LNS based system can outperform its FP counterpart by up to 4.35?? in speed. The final, pipelined LNU system when implemented in 65nm occupies an area of 54.3 kGE, allows 89 MFLOP per second and consumes 15.9???136.7 pJ per operation at 1.2V under typical conditions and 25??C.},
	booktitle = {2016 {Design}, {Automation} {Test} in {Europe} {Conference} {Exhibition} ({DATE})},
	author = {Popoff, Y. and Scheidegger, F. and Schaffner, M. and Gautschi, M. and G├╝rkaynak, F. K. and Benini, L.},
	month = mar,
	year = {2016},
	keywords = {Encoding, Europe, Hardware, Interpolation, Kernel, Standards, Table lookup},
	pages = {1387--1392},
}

@article{miyashita_convolutional_2016,
	title = {Convolutional {Neural} {Networks} using {Logarithmic} {Data} {Representation}},
	url = {http://arxiv.org/abs/1603.01025},
	abstract = {Recent advances in convolutional neural networks have considered model complexity and hardware efficiency to enable deployment onto embedded systems and mobile devices. For example, it is now well-known that the arithmetic operations of deep networks can be encoded down to 8-bit fixed-point without significant deterioration in performance. However, further reduction in precision down to as low as 3-bit fixed-point results in significant losses in performance. In this paper we propose a new data representation that enables state-of-the-art networks to be encoded to 3 bits with negligible loss in classification performance. To perform this, we take advantage of the fact that the weights and activations in a trained network naturally have non-uniform distributions. Using non-uniform, base-2 logarithmic representation to encode weights, communicate activations, and perform dot-products enables networks to 1) achieve higher classification accuracies than fixed-point at the same resolution and 2) eliminate bulky digital multipliers. Finally, we propose an end-to-end training procedure that uses log representation at 5-bits, which achieves higher final test accuracy than linear at 5-bits.},
	urldate = {2016-05-14},
	journal = {arXiv:1603.01025 [cs]},
	author = {Miyashita, Daisuke and Lee, Edward H. and Murmann, Boris},
	month = mar,
	year = {2016},
	note = {arXiv: 1603.01025},
	keywords = {Computer Science - Learning, Computer Science - Neural and Evolutionary Computing},
}

@inproceedings{ismail_hybrid_2013,
	title = {Hybrid logarithmic number system arithmetic unit: {A} review},
	shorttitle = {Hybrid logarithmic number system arithmetic unit},
	doi = {10.1109/CircuitsAndSystems.2013.6671617},
	abstract = {Logarithmic number system (LNS) arithmetic has the advantages of high performance and high-precision in complex function computation. However, the large hardware problem in LNS addition/subtraction computation has made the large word-length LNS arithmetic implementation impractical. In this paper, the concept of merging the LNS and Floating Point (FLP) operation into a single arithmetic logic unit (ALU) that can execute addition/subtraction and division/multiplication more faster, precise and less complicated has been reviewed. The advantages of using hybrid system were highlighted while comparing and explaining about FLP and LNS.},
	booktitle = {2013 {IEEE} {International} {Conference} on {Circuits} and {Systems} ({ICCAS})},
	author = {Ismail, R. C. and Zakaria, M. K. and Murad, S. A. Z.},
	month = sep,
	year = {2013},
	keywords = {ALU, arithmetic logic unit, floating point, floating point arithmetic, FLP operation, hybrid, hybrid logarithmic number system arithmetic unit, LNS addition-subtraction computation, LNS arithmetic, logarithmic number system, logic design},
	pages = {55--58},
}

@inproceedings{garcia_lns_2004,
	title = {{LNS} {Architectures} for {Embedded} {Model} {Predictive} {Control} {Processors}},
	abstract = {This paper presents a research on arithmetic units targeted to implement model predictive control (MPC) in a custom embedded processor. A novel hardware implementation of cotransformation for the calculation of addition and subtraction in the Logarithmic Number System (LNS) is proposed. This architecture provides a small ROM-less adder/subtracter, with longer operation latency than other LNStechniques, but easily pipelineable. These characteristics make it very adequate for implementing the datapath of custom MPC embeddable microprocessors. A review of the arithmetic customization process is presented, including: an analysis of the finite precision problem, modifications to the standard MPC algorithm that simplify embedding the application, and the reasons that suggest better performance of LNSover standard floating-point (FP) architectures. The proposed arithmetic unit architecture for 16-bit LNSis fully synthesized for ASIC, and compared with an equivalent FP implementation. Area and clock cycle estimates are compared. Finally, considerations on low-precision implementations of LNSarithmetic units are provided, and an embedded-ROM implementation of addition/subtraction in LNSis proposed and analyzed.},
	booktitle = {Processors,ΓÇ¥ in {International} {Conference} on {Compilers}, {Architectures} and {Synthesis} for {Embedded} {Systems}, (in press},
	author = {Garcia, Jesus and Bleris, Leonidas and Arnold, Mark G. and Kothare, Mayuresh V.},
	year = {2004},
	pages = {79--84},
}

@inproceedings{rust_low_2013,
	title = {Low complexity {QR}-decomposition architecture using the logarithmic number system},
	doi = {10.7873/DATE.2013.034},
	abstract = {In this paper we propose a QR-decomposition hardware implementation that processes complex calculations in the logarithmic number system. Thus, low complexity numeric format converters are installed, using nonuniform piecewise and multiplier-less function approximation. The proposed algorithm is simulated with several different configurations in a downlink precoding environment for 4├ù4 and 8├ù8 multi-antenna wireless communication systems. In addition, the results are compared to default CORDIC-based architectures. In a second step, HDL implementation as well as logical and physical CMOS synthesis are performed. The comparison to actual references highlight our approach as highly efficient in terms of hardware complexity and accuracy.},
	booktitle = {Design, {Automation} {Test} in {Europe} {Conference} {Exhibition} ({DATE}), 2013},
	author = {Rust, J. and Ludwig, F. and Paul, S.},
	month = mar,
	year = {2013},
	keywords = {LNS, Modulation, Niobium, Nonuniform function approximation, QR-Decomposition},
	pages = {97--102},
}

@article{dinechin_multipartite_2005,
	title = {Multipartite table methods},
	volume = {54},
	issn = {0018-9340},
	doi = {10.1109/TC.2005.54},
	abstract = {A unified view of most previous table-lookup-and-addition methods (bipartite tables, SBTM, STAM, and multipartite methods) is presented. This unified view allows a more accurate computation of the error entailed by these methods, which enables a wider design space exploration, leading to tables smaller than the best previously published ones by up to 50 percent. The synthesis of these multipartite architectures on Virtex FPGAs is also discussed. Compared to other methods involving multipliers, the multipartite approach offers the best speed/area tradeoff for precisions up to 16 bits. A reference implementation is available at http://www.ens-lyon.fr/LIP/Arenaire/.},
	number = {3},
	journal = {IEEE Transactions on Computers},
	author = {Dinechin, F. de and Tisserand, A.},
	month = mar,
	year = {2005},
	keywords = {Hardware, Table lookup, Arithmetic, bipartite table, Computer architecture, computer arithmetic, Cost function, digital arithmetic, elementary function evaluation, field programmable gate arrays, hardware operator, Iterative algorithms, multipartite table, Polynomials, Signal processing, Space exploration, table-lookup-and-addition method, Virtex FPGA},
	pages = {319--330},
}

@inproceedings{gautschi_4.6_2016,
	title = {4.6 {A} 65nm {CMOS} 6.4-to-29.{2pJ}/{FLOP}@0.{8V} shared logarithmic floating point unit for acceleration of nonlinear function kernels in a tightly coupled processor cluster},
	doi = {10.1109/ISSCC.2016.7417917},
	abstract = {Energy-efficient computing and ultra-low-power operation are requirements for many application areas, such as IoT and wearables. While for some applications, integer and fixed-point processor instructions suffice, others (e.g. simultaneous localization and mapping - SLAM, stereo vision, nonlinear regression and classification) require a larger dynamic range, typically obtained using single/double-precision floating point (FP) instructions. Logarithmic number systems (LNS) have been proposed [1,2] as an energy-efficient alternative to conventional FP, as several complex operations such as MUL, DIV, and EXP translate into simpler arithmetic operations in the logarithmic space and can be efficiently calculated using integer arithmetic units. However, ADD and SUB become nonlinear and have to be approximated by look-up tables (LUTs) and interpolation, which is typically implemented in a dedicated LNS unit (LNU) [1,2]. The area of LNUs grows exponentially with the desired precision, and an LNU with accuracy comparable to IEEE single-precision format is larger than a traditional floating-point unit (FPU). However, we show that in multi-core systems optimized for ultra-low-power operation such as the PULP system [3], one LNU can be efficiently shared in a cluster as indicated in Fig. 4.6.1. This arrangement not only reduces the per-core area overhead, but more importantly, allows several costly operations such as FP MUL/DIV to be processed without contention within the integer cores without additional overhead. We show that for typical nonlinear processing tasks, our LNU design can be up to 4.2├ù more energy efficient than a private-FP design.},
	booktitle = {2016 {IEEE} {International} {Solid}-{State} {Circuits} {Conference} ({ISSCC})},
	author = {Gautschi, M. and Schaffner, M. and G∩┐╜∩┐╜rkaynak, F. K. and Benini, L.},
	month = jan,
	year = {2016},
	keywords = {Interpolation, Kernel, Table lookup, floating point arithmetic, logarithmic number system, logic design, Benchmark testing, CMOS, CMOS integrated circuits, Energy efficiency, energy-efficient computing, fixed point arithmetic, fixed-point processor, floating-point unit, FLOP, integer arithmetic units, LNU design, logarithmic floating point unit, look-up table, LUT, Microprocessor chips, multicore system, multiprocessing systems, nonlinear function kernel, precision floating point, program processors, size 65 nm, tightly coupled processor cluster, ultra-low-power operation, voltage 0.8 V},
	pages = {82--83},
}

@inproceedings{ibraheem_medical_2016,
	title = {Medical images compression with clinical diagnostic quality using logarithmic {DWT}},
	doi = {10.1109/BHI.2016.7455919},
	abstract = {Diagnostic quality is an essential requirement in the medical images compression field to avoid misdiagnosis by radiologists. In this paper, a novel study on using the logarithm in medical images compression is presented. Two novel compression schemes are proposed to improve the image quality. The proposed compression schemes relies on discrete wavelet transform (DWT). The first approach is based on the logarithmic number system (LNS) arithmetic. The second approach (Log-DWT) is a hybrid of LNS and Linear arithmetic. Both schemes compromise between the computation speed and precision. Both approaches show a significant improvement in the image quality in addition to providing better compression rate compared to the classical approach which does not include any logarithmic operations. The structural similarity index (SSIM) was used to assess the two approaches in terms of the image quality. The performance has been evaluated for the proposed approaches and has been compared to the classical approach.},
	booktitle = {2016 {IEEE}-{EMBS} {International} {Conference} on {Biomedical} and {Health} {Informatics} ({BHI})},
	author = {Ibraheem, M. S. and Ahmed, S. Z. and Hachicha, K. and Hochberg, S. and Garda, P.},
	month = feb,
	year = {2016},
	keywords = {logarithmic number system, LNS, Biomedical imaging, biomedical MRI, clinical diagnostic quality, Data compression, discrete wavelet transform, Discrete wavelet transforms, Image coding, image quality, Indexes, linear arithmetic, Log-DWT, logarithmic DWT, Magnetic resonance imaging, medical image compression, medical image processing, MRI, radiologists, radiology, SSIM, structural similarity index, X-ray imaging},
	pages = {402--405},
}

@article{fu_accelerating_2009,
	title = {Accelerating {Seismic} {Computations} {Using} {Customized} {Number} {Representations} on {FPGAs}},
	volume = {2009},
	issn = {1687-3955, 1687-3963},
	url = {http://jes.eurasipjournals.com/content/2009/1/382983},
	doi = {10.1155/2009/382983},
	language = {en},
	urldate = {2016-03-18},
	journal = {EURASIP Journal on Embedded Systems},
	author = {Fu, Haohuan and Osborne, William and Clapp, Robert G. and Mencer, Oskar and Luk, Wayne},
	year = {2009},
	pages = {1--13},
}

@misc{trautner_next_2009,
	address = {ESTEC, NL},
	title = {Next {Generation} {DSP} {Roadmap} and related {ESA} activities},
	author = {Trautner, Roland},
	month = apr,
	year = {2009},
}

@misc{williams_logarithmic_1987,
	title = {Logarithmic arithmetic logic unit},
	url = {https://patents.google.com/patent/US4682302A/en?q=%22logarithmic+arithmetic%22&page=3},
	urldate = {2016-01-08},
	author = {Williams, Tim},
	year = {1987},
}

@misc{taylor_hybrid_1988,
	title = {Hybrid floating point/logarithmic number system arithmetic processor},
	url = {https://patents.google.com/patent/US4720809A/en?q=logarithmic&q=arithmetic&page=2},
	urldate = {2016-01-08},
	author = {Taylor, F. J.},
	year = {1988},
}

@article{chen_decimal_2012,
	title = {Decimal floating-point antilogarithmic converter based on selection by rounding: algorithm and architecture},
	volume = {6},
	issn = {1751-8601, 1751-861X},
	shorttitle = {Decimal floating-point antilogarithmic converter based on selection by rounding},
	url = {http://digital-library.theiet.org/content/journals/10.1049/iet-cdt.2011.0089},
	doi = {10.1049/iet-cdt.2011.0089},
	language = {en},
	number = {5},
	urldate = {2015-12-14},
	journal = {IET Computers \& Digital Techniques},
	author = {Chen, D. and Han, L. and Ko, S.-B.},
	month = sep,
	year = {2012},
	pages = {277--289},
}

@phdthesis{marasa_accumulated_1970,
	address = {Saint Louis, Missouri},
	title = {Accumulated {Arithmetic} {Error} in {Floating}-{Point} and {Alternative} {Logarithmic} {Number} {Systems}},
	school = {Washington University},
	author = {Marasa, John D.},
	month = jun,
	year = {1970},
}

@inproceedings{muller_semi-logarithmic_1995,
	title = {Semi-logarithmic number systems},
	doi = {10.1109/ARITH.1995.465358},
	abstract = {We present a new class of number systems, called semi-logarithmic number systems, that constitute a family of various compromises between floating-point and logarithmic number systems. We propose arithmetic algorithms for the semi-logarithmic number systems, and we compare these number systems to the classical floating-point or logarithmic number systems},
	booktitle = {, {Proceedings} of the 12th {Symposium} on {Computer} {Arithmetic}, 1995},
	author = {Muller, J.-M. and Tisserand, A. and Scherbyna, A.},
	month = jul,
	year = {1995},
	keywords = {Acceleration, Digital arithmetic, floating-point system, interpolation, logarithmic number systems, semi-logarithmic number systems},
	pages = {201--207},
}

@article{marino_new_1972,
	title = {New {Algorithms} for the {Approximate} {Evaluation} in {Hardware} of {Binary} {Logarithms} and {Elementary} {Functions}},
	volume = {C-21},
	issn = {0018-9340},
	doi = {10.1109/T-C.1972.223516},
	abstract = {After an analysis of the errors introduced in the approximate computation of the x2function (O Γëñ x Γëñ 1) and its distributions, we find that a parabolic rather than linear fit to log2 (1 + x), (O Γëñ x Γëñ 1) can be performed in hardware without increasing the number of necessary sums. An improvement, by a factor of about 2.5, in the absolute maximum error can be expected. Full simulation on a digital computer confirms the theoretical analysis. We used partitioning of the range in only two subranges; the resulting hardware is not harder than in piecewise linear approximation. Examples are also included to show the effectiveness of the method for approximation of different functions.},
	number = {12},
	journal = {IEEE Transactions on Computers},
	author = {Marino, D.},
	month = dec,
	year = {1972},
	keywords = {Approximate computation, approximate evaluation of elementary functions, binary logarithms., Computer errors, elementary functions, error analysis, Least squares approximation, Linear approximation, logarithm, Performance analysis, Performance evaluation, Piecewise linear approximation},
	pages = {1416--1421},
}

@article{lewis_interleaved_1994,
	title = {Interleaved memory function interpolators with application to an accurate {LNS} arithmetic unit},
	volume = {43},
	issn = {0018-9340},
	doi = {10.1109/12.295859},
	abstract = {This paper describes a new method for polynomial interpolation in hardware, with advantages demonstrated by its application to an accurate logarithmic number system (LNS) arithmetic unit. The use of an interleaved memory reduces storage requirements by allowing each stored function value to be used in interpolation across several segments. This strategy can be shown to always use fewer words of memory than an optimized polynomial with stored polynomial coefficients. Interleaved memory function interpolators are then applied to the specific goal of an accurate logarithmic number system arithmetic unit. Many accuracy requirements for the LNS arithmetic unit are possible. Although a round to nearest would be desirable, it cannot be easily achieved. The goal suggested is to insure that the worst case LNS relative error is smaller than the worst case floating point (FP) relative error. Using the interleaved memory interpolator, the detailed design of an LNS arithmetic unit is performed using a second order polynomial interpolator including approximately 91K bits of ROM. This arithmetic unit has better accuracy and less complexity than previous LNS units},
	language = {English},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Lewis, D. M},
	month = aug,
	year = {1994},
	keywords = {91 kbit, accuracy requirements, accurate LNS arithmetic unit, Cost function, elementary functions, error analysis, Function approximation, interleaved memory function interpolators, logarithmic number system, polynomial interpolation, read-only storage, ROM, round to nearest, table lookup algorithms, Terminology},
	pages = {974--982},
}

@inproceedings{lewis_complex_1999,
	title = {Complex logarithmic number system arithmetic using high-radix redundant {CORDIC} algorithms},
	isbn = {0-7695-0116-8},
	doi = {10.1109/ARITH.1999.762845},
	abstract = {This paper describes the application of high radix redundant CORDIC algorithms to complex logarithmic number system arithmetic. It shows that a CLNS addition can be performed with approximately the same hardware as a high-radix CORDIC operation. A design example comparable to single precision floating point has been designed and simulated},
	language = {English},
	booktitle = {14th {IEEE} {Symposium} on {Computer} {Arithmetic}, 1999. {Proceedings}},
	publisher = {IEEE},
	author = {Lewis, D.},
	year = {1999},
	keywords = {CLNS addition, complex logarithmic number system arithmetic, high radix redundant CORDIC algorithms, single precision floating point},
	pages = {194--203},
}

@article{dimitrov_theory_1999,
	title = {Theory and applications of the double-base number system},
	volume = {48},
	issn = {00189340},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=805158},
	doi = {10.1109/12.805158},
	number = {10},
	urldate = {2015-07-05},
	journal = {IEEE Transactions on Computers},
	author = {Dimitrov, V.S. and Jullien, G.A. and Miller, W.C.},
	month = oct,
	year = {1999},
	keywords = {Table lookup, Digital arithmetic, arithmetic operations, Computational complexity, DBNS, digital signal processing, double base number system, Greedy algorithms, lookup table, representation},
	pages = {1098--1106},
}

@article{stouraitis_floating-point_1988,
	title = {Floating-point to logarithmic encoder error analysis},
	volume = {37},
	issn = {0018-9340},
	doi = {10.1109/12.2232},
	abstract = {The logarithmic number (LNS), which supports high-speed, high-precision arithmetic, is envisioned as a possible arithmetic coprocessor attachment to a floating-point (FLP) processor. An error analysis of an FLP-to-LNS encoder is presented. Analytic expressions for the probability density function of the encoding error are derived for a number of cases, according to the memory word lengths used for the encoding. Simulation has verified the theoretical results},
	language = {English},
	number = {7},
	journal = {IEEE Transactions on Computers},
	author = {Stouraitis, T. and Taylor, F. J},
	month = jul,
	year = {1988},
	keywords = {accuracy control, arithmetic coprocessor attachment, Computer networks, encoding, error analysis, floating point processor, floating-point arithmetic, logarithmic encoder, logarithmic number, logarithmic number system, number systems, probability density function, simulation, Switches},
	pages = {858--863},
}

@article{swartzlander_sign/logarithm_1975,
	title = {The {Sign}/{Logarithm} {Number} {System}},
	volume = {24},
	issn = {0018-9340},
	doi = {10.1109/T-C.1975.224172},
	number = {12},
	journal = {IEEE Transactions on Computers},
	author = {Swartzlander, E. E. and Alexopoulos, A. G.},
	year = {1975},
	keywords = {core, LNS, logarithmic number system, number systems},
	pages = {1238--1242},
}

@book{swartzlander_computer_1990,
	address = {Los Alamitos, CA},
	title = {Computer {Arithmetic}},
	volume = {1},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Swartzlander, E. E.},
	year = {1990},
	keywords = {addition, cordic, division, elementary functions, floating-point arithmetic, multiplication, number systems, on-line arithmetic, redundant number systems, survey on computer arithmetic},
}

@article{a._ziv_fast_1991,
	title = {Fast evaluation of elementary mathematical functions with correctly rounded last bit},
	volume = {17},
	number = {3},
	journal = {ACM Transactions on Mathematical Software},
	author = {{A. Ziv}},
	month = sep,
	year = {1991},
	pages = {410--423},
}

@article{yohe_roundings_1973,
	title = {Roundings in floating-point arithmetic},
	volume = {C-22},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Yohe, J. M.},
	month = jun,
	year = {1973},
	keywords = {accuracy control, floating-point arithmetic, rounding},
	pages = {577--586},
}

@article{wolrich_high_1984,
	title = {A high performance floating-point coprocessor},
	volume = {SC-19},
	number = {5},
	journal = {IEEE journal of solid-state circuits},
	author = {Wolrich, G. and {others}},
	month = oct,
	year = {1984},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {floating-point arithmetic},
	pages = {690--696},
}

@article{volder_cordic_1959,
	title = {The {CORDIC} {Computing} {Technique}},
	volume = {EC-8},
	number = {3},
	journal = {IRE Transactions on Electronic Computers},
	author = {Volder, J.},
	year = {1959},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {cordic, elementary functions, shift-and-add algorithms, trigonometric functions},
	pages = {330--334},
}

@article{tsao_error_1980,
	title = {Error complexity analysis of algorithms for matrix multiplication and matrix chain product},
	volume = {C-29},
	journal = {IEEE Transactions on Computers},
	author = {Tsao, N. K.},
	year = {1980},
	keywords = {accuracy control},
	pages = {662--665},
}

@article{tocher_techniques_1958,
	title = {Techniques of multiplication and division for automatic binary divider},
	volume = {11},
	number = {3},
	journal = {Quarterly journal of mechanics and applied mathematics},
	author = {Tocher, K. D.},
	year = {1958},
	keywords = {division, multiplication},
	pages = {364--384},
}

@article{sweeney_analysis_1965,
	title = {An analysis of floating-point addition},
	volume = {4},
	journal = {IBM Syst. Journal},
	author = {Sweeney, D. W.},
	year = {1965},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {addition, floating-point arithmetic},
	pages = {31--42},
}

@article{troutman_design_1986,
	title = {Design of a standard floating-point chip},
	volume = {SC-21},
	journal = {IEEE journal of solid-state circuits},
	author = {Troutman, W. W.},
	year = {1986},
	keywords = {floating-point arithmetic},
	pages = {396--399},
}

@inproceedings{d._das_sarma_faithful_1997,
	address = {Asilomar, CA},
	title = {Faithful {Interpolation} in {Reciprocal} {Tables}},
	booktitle = {Proceeding of the 13th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {{D. Das Sarma} and {D. W. Matula}},
	editor = {{Lang} and {Muller} and {Takagi}},
	month = jul,
	year = {1997},
	keywords = {division, interpolation, reciprocal},
	pages = {82--91},
}

@article{shaw_arithmetic_1950,
	title = {Arithmetic operations in a binary computer},
	volume = {21},
	journal = {Rev. Sci. Instrum.},
	author = {Shaw, R. F.},
	year = {1950},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {survey on computer arithmetic},
	pages = {687--693},
}

@article{rao_error_1968,
	title = {Error checking logic for arithmetic type operations of a processor},
	volume = {C-17},
	number = {9},
	journal = {IEEE Transactions on Computers},
	author = {Rao, T. R. N.},
	month = sep,
	year = {1968},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {error-tolerant arithmetic},
	pages = {845--849},
}

@phdthesis{s._mcquillan_algorithms_1992,
	title = {Algorithms and {Architectures} for {High} {Performance} {Arithmetic} {Processors}},
	school = {The Queen's University of Belfast},
	author = {{S. McQuillan}},
	year = {1992},
}

@book{a._r._omondi_computer_1994,
	title = {Computer {Arithmetic} {Systems}, {Algorithms}, {Architecture} and {Implementations}},
	publisher = {Prentice Hall International Series in Computer Science, Englewood Cliffs, NJ},
	author = {{A. R. Omondi}},
	year = {1994},
}

@techreport{n._quach_fast_1991,
	title = {On {Fast} {IEEE} {Rounding}},
	number = {CSL-TR-91-459},
	institution = {Computer Systems Laboratory, Dept. on Electrical Engineering and Computer Science Stanford University},
	author = {{N. Quach} and {N. Takagi} and {M. Flynn}},
	month = jan,
	year = {1991},
}

@book{parhami_computer_2000,
	address = {New-York},
	title = {Computer {Arithmetic} : {Algorithms} and {Hardware} {Designs}},
	publisher = {Oxford University Press},
	author = {Parhami, Behrooz},
	year = {2000},
}

@phdthesis{s._f._oberman_design_1996,
	title = {Design issues in high performance floating point arithmetic units},
	school = {Dept. of Electrical Engineering, Stanford University},
	author = {{S. F. Oberman}},
	month = nov,
	year = {1996},
}

@inproceedings{a._munk-nielsen_-line_1996,
	address = {Lyon, France},
	title = {On-line {Algorithms} for {Computing} {Exponentials} and {Logarithms}},
	booktitle = {Proceedings of {Europar}'96, {Lecture} {Notes} in {Computer} {Science} 1124},
	publisher = {Springer-Verlag, Berlin},
	author = {{A. Munk-Nielsen} and {J. M. Muller}},
	month = aug,
	year = {1996},
}

@inproceedings{a._munk-nielsen_msb-first_1995,
	title = {{MSB}-first {Digit}-{Serial} {Arithmetic}},
	booktitle = {Real {Numbers} and {Computers} ({Saint} {Etienne}, {France})},
	author = {{A. Munk-Nielsen} and {P. Kornerup}},
	editor = {{Bajard} and {Michelucci} and {Moreau} and {Muller}},
	year = {1995},
}

@incollection{goos_logarithmic_2002,
	address = {Berlin, Heidelberg},
	title = {Logarithmic {Number} {System} and {Floating}-{Point} {Arithmetics} on {FPGA}},
	volume = {2438},
	isbn = {978-3-540-44108-3 978-3-540-46117-3},
	url = {http://link.springer.com/10.1007/3-540-46117-5_65},
	urldate = {2015-08-10},
	booktitle = {Field-{Programmable} {Logic} and {Applications}: {Reconfigurable} {Computing} {Is} {Going} {Mainstream}},
	publisher = {Springer Berlin Heidelberg},
	author = {Matou┼íek, Rudolf and Tich├╜, Milan and Pohl, Zden─¢k and Kadlec, Ji┼Ö├¡ and Softley, Chris and Coleman, Nick},
	editor = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan and Glesner, Manfred and Zipf, Peter and Renovell, Michel},
	year = {2002},
	pages = {627--636},
}

@inproceedings{coleman_european_2001,
	title = {The {European} {Logarithmic} {Microprocessor} - a {QR} {RLS} application},
	isbn = {0-7803-7147-X},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=986897},
	doi = {10.1109/ACSSC.2001.986897},
	urldate = {2015-08-10},
	publisher = {IEEE},
	author = {Coleman, J.N. and Softley, C.I. and Kadlec, J. and Matousek, R. and Licko, M. and Pohl, Z. and Hermanek, A.},
	year = {2001},
	keywords = {LNS, applications},
	pages = {155--159 vol.1},
}

@patent{coleman_method_2004,
	title = {Method and apparatus for determining the approximate valve of a logarithmic function},
	url = {http://www.freepatentsonline.com/6711596.html},
	abstract = {A logarithmic arithmetic apparatus for enabling a microprocessor to determine the approximate value of a logarithmic function F(x) at a value of x of interest is disclosed. The apparatus includes look up tables (104 to 107) for storing and simultaneously accessing values of the function and its derivative for discrete values of x, an error between the value of the function and the value extrapolated from the derivative for discrete values of x, and a ratio function for determining the proportion of this error across an interval between two adjacent discrete values of x. The apparatus is also provided with multipliers (108, 109) and adder stages (110 to 112). The apparatus enables many logarithmic arithmetic functions to be determined accurately without significantly increasing the necessary capacity of the look up tables (104 and 105), and without significantly decreasing the speed of calculation.},
	nationality = {United States},
	assignee = {University of Newcastle Upon Tyne (GB)},
	number = {6711596},
	urldate = {2015-08-10},
	author = {Coleman, John Nicholas},
	month = mar,
	year = {2004},
}

@article{moreau_approximate_2015,
	title = {Approximate {Computing}: {Making} {Mobile} {Systems} {More} {Efficient}},
	volume = {14},
	issn = {1536-1268},
	shorttitle = {Approximate {Computing}},
	doi = {10.1109/MPRV.2015.25},
	abstract = {Approximate systems can reclaim energy that's currently lost to the "correctness tax" imposed by traditional safety margins designed to prevent worst-case scenarios. Researchers at the University of Washington have co-designed programming language extensions, a compiler, and a hardware co-processor to support approximate acceleration. Their end-to-end system includes two building blocks. First, a new programmer-guided compiler framework transforms programs to use approximation in a controlled way. An Approximate C Compiler for Energy and Performance Tradeoffs (Accept) uses programmer annotations, static analysis, and dynamic profiling to find parts of a program that are amenable to approximation. Second, the compiler targets a system on a chip (SoC) augmented with a co-processor that can efficiently evaluate coarse regions of approximate code. A Systolic Neural Network Accelerator in Programmable logic (Snnap) is a hardware accelerator prototype that can efficiently evaluate approximate regions of code in a general-purpose program.},
	number = {2},
	journal = {IEEE Pervasive Computing},
	author = {Moreau, T. and Sampson, A. and Ceze, L.},
	month = apr,
	year = {2015},
	keywords = {field programmable gate arrays, Benchmark testing, ACCEPT, approximate acceleration, approximate C compiler-for-energy-and-performance tradeoffs, approximate computing, approximate systems, building blocks, correctness tax, dynamic profiling, end-to-end system, energy efficiency, general-purpose program, green computing, hardware accelerator prototype, hardware coprocessor, mobile, Mobile communication, mobile computing, mobile systems, neural nets, pervasive computing, program compilers, program diagnostics, programmable logic, programmable logic devices, programmer annotations, programmer-guided compiler framework, programming language extensions, safety margins, Snnap, SNNAP, SoC, static analysis, system-on-a-chip, systolic neural network accelerator, University of Washington},
	pages = {9--13},
}

@inproceedings{balaji_memory_2007,
	title = {Memory {Reduction} {Techniques} for {Logarithmic} {Number} {System}},
	isbn = {1-4244-0997-7},
	doi = {10.1109/ICSCN.2007.350772},
	abstract = {Logarithmic number system (LNS) is used in those signal processing applications where multiplication becomes a bottleneck. In LNS, multiplications and divisions are computed as additions and subtractions respectively. However to implement these additions and subtractions in LNS require large memory to store logarithmic and antilog values of numbers. This paper proposes possible techniques for memory reduction in LNS},
	language = {English},
	booktitle = {International {Conference} on {Signal} {Processing}, {Communications} and {Networking}, 2007. {ICSCN} '07},
	publisher = {IEEE},
	author = {Balaji, G. B and Balaji, K. and Sundararaman, H. and Naveen, A. and Santha, K. R},
	month = feb,
	year = {2007},
	keywords = {signal processing, digital signal processing, antilog value, Convolution, memory reduction technique, signal processing application, storage management},
	pages = {410--413},
}

@article{stouraitis_analysis_1988,
	title = {Analysis of logarithmic number system processors},
	volume = {35},
	issn = {0098-4094},
	doi = {10.1109/31.1779},
	abstract = {An analysis of a logarithmic number system (LNS) processor is presented. The analysis includes processor designs that overcome the historical limitation of the word-length of LNS, thus increasing the precision of the processor. A 20-bit LNS VLSI chip layout and timing estimates have been produced in cooperation with Honeywell Inc. Using an enhanced 1.25-ns technology, and inserting pipelining registers in the addition/subtraction data path, a 24-bit adaptive radix processor (ARP)/LNS processor can be realized. The predicted performance of the device would be on the order of 20 ns for multiplication/division and 40 ns for addition/subtraction. This class of processors is now supported with a predictive error model. The theoretical studies were supported and verified by computer simulation experiments at all levels of analysis},
	language = {English},
	number = {5},
	journal = {IEEE Transactions on Circuits and Systems},
	author = {Stouraitis, T. and Taylor, F. J},
	month = may,
	year = {1988},
	keywords = {LNS, error analysis, core, signal processing, digital signal processing, 20 bit, 20 ns, 24 bit, 40 ns, adaptive radix processor, Adaptive systems, computer simulation experiments, Honeywell, logarithmic number system processors, logic, pipelining registers, predictive error model, timing estimates},
	pages = {519--527},
}

@inproceedings{hao-yung_lo_logarithmic_1996,
	title = {Logarithmic conversion by four partitioned hybrid-{ROMs}},
	isbn = {0-8186-7460-1},
	doi = {10.1109/ISPAN.1996.509040},
	abstract = {The logarithmic number systems (LNS) have long been used in arithmetic to simplify processes such as: multiplication to addition, division to subtraction, and powers to multiplication, etc. A difficult problem may arise from the accuracy of conversion during the processing operations and a very large number of product terms should be generated if a look-up table is realized by a ROM. In some cases, it may be impossible to use such a large capacity ROM (say, 224├ù24) if no partitioned scheme is used. This paper presents a four-partition conversion scheme in order to be implemented by small sized ROMs. It can generate better results and higher speed conversion comparing with previous methods for two- or three-partition schemes. This algorithm can also be used in conversion of antilogarithms},
	language = {English},
	booktitle = {Second {International} {Symposium} on {Parallel} {Architectures}, {Algorithms}, and {Networks}, 1996. {Proceedings}},
	publisher = {IEEE},
	author = {Hao-Yung Lo and Hsiu-Feng Lin and Yue-Yuan Ho},
	month = jun,
	year = {1996},
	keywords = {antilogarithms, four-partition conversion, hybrid-ROMs, partitioned scheme},
	pages = {550--552},
}

@inproceedings{lee_logarithmic_2003,
	title = {Logarithmic number system and floating-point implementations of a well-conditioned {RLS} estimation algorithm on {FPGA}},
	volume = {1},
	isbn = {0-7803-8104-1},
	doi = {10.1109/ACSSC.2003.1291879},
	abstract = {This paper presents the results from the implementation of a recursive least squares estimation algorithm on FPGA and compares the implementation using two types of arithmetic. The estimation uses an orthogonal set of discrete Chebyshev polynomials to overcome the ill-conditioning problem that is exhibited by the classical least mean squared linear regression algorithm using the Taylor expansion. A recursive form of the algorithm is implemented at varying precision word lengths on FPGA using a recently developed set of logarithmic number system macros and a set of parametrised IEEE-754 compliant floating-point cores. Speed and area metrics are presented.},
	language = {English},
	booktitle = {Conference {Record} of the {Thirty}-{Seventh} {Asilomar} {Conference} on {Signals}, {Systems} and {Computers}, 2003},
	publisher = {IEEE},
	author = {Lee, B. and Lever, K.},
	month = nov,
	year = {2003},
	keywords = {signal processing, discrete Chebyshev polynomials, discrete orthogonal polynomials, floating-point implementations, Linear regression, linear regression algorithm, recursive least squares estimation algorithm, regression analysis, Resonance light scattering, RLS estimation algorithm, Taylor expansion},
	pages = {109-- 113 Vol.1},
}

@inproceedings{arnold_improved_1988,
	title = {Improved accuracy for logarithmic addition in {DSP} applications},
	doi = {10.1109/ICASSP.1988.196947},
	abstract = {Logarithmic number systems are an attractive method of implementing high-speed digital signal-processing systems with a word size of about 14 bits. Larger word sizes pose problems because of the address limitations of the ROMs needed for logarithmic addition. M.G. Arnold (1982) gave several interpolation techniques that can double the precision, but these techniques require the use of a fixed-point multiplier. F.J. Taylor (1983) proposed a modified linear interpolation that could increase the precision by about four bits without using a multiplier. It is shown that an improvement can be made in Taylor's technique by choosing a different constant. Also, by combining one of Arnold's techniques with a variant of Taylor's modification, precision similar to that of Taylor's design can be obtained using a simpler circuit},
	language = {English},
	booktitle = {, 1988 {International} {Conference} on {Acoustics}, {Speech}, and {Signal} {Processing}, 1988. {ICASSP}-88},
	publisher = {IEEE},
	author = {Arnold, M. G and Cowles, J. and Bailey, T.},
	month = apr,
	year = {1988},
	keywords = {LNS, core, digital signal processing, Arnold's techniques, DSP, high-speed digital signal-processing, modified linear interpolation, ROMs, Taylor's modification},
	pages = {1714--1717 vol.3},
}

@inproceedings{taylor_logarithmic_1984,
	title = {A logarithmic arithmetic unit for signal processing},
	volume = {9},
	doi = {10.1109/ICASSP.1984.1172693},
	abstract = {The logarithmic number system, or LNS, has the ability to support very high-speed arithmetic, over a wide dynamic range, in limited hardware. This system, with extensions, has several architectural and data enhancement attributes that makes it attractive to the DSP scientists and engineer. In this paper, the regularity of the LNS, its data compression capabilities, and speed-complexity potential are advocated in a DSP setting. It is shown that the LNS, and a floating point variation on this theme, offer distinct advantages over classical DSP architectures.},
	language = {English},
	booktitle = {Acoustics, {Speech}, and {Signal} {Processing}, {IEEE} {International} {Conference} on {ICASSP} '84.},
	publisher = {IEEE},
	author = {Taylor, F.},
	month = mar,
	year = {1984},
	keywords = {LNS, core, signal processing, digital signal processing, Adaptive systems, DSP, Adaptive control, Programmable control},
	pages = {398-- 401},
}

@inproceedings{yan_wang_low_2002,
	title = {Low complexity {OFDM} receiver using {Log}-{FFT} for coded {OFDM} system},
	volume = {3},
	isbn = {0-7803-7448-7},
	doi = {10.1109/ISCAS.2002.1010256},
	abstract = {In this paper, we describe a low complexity orthogonal frequency-division multiplexing (OFDM) receiver using Log-FFT for coded OFDM system. The complexity of the Log-FFT depends on the size of the look-up table, which is determined by the bit width of logarithmic number systems (LNS) representation. In coded OFDM system, simulation results show that there is no degradation in bit error rate performance when only two fractional bits are used for the LNS. As the bit width is so small, the look-up table can be easily implemented using a few combinational logic gates. Comparing the complexity and power consumption of the Log-FFT butterfly module with those of fixed point FFT butterfly module, about 60\% reduction can be achieved.},
	language = {English},
	booktitle = {{IEEE} {International} {Symposium} on {Circuits} and {Systems}, 2002. {ISCAS} 2002},
	publisher = {IEEE},
	author = {Yan Wang and Hing Mo Lam and Chi-Ying Tsui and Cheng, R. S and Wai Ho Mow},
	year = {2002},
	keywords = {look-up table, bit width, butterfly module, coded OFDM system, combinational logic gates, Energy consumption, fractional bits, Frequency division multiplexing, log-FFT, low complexity OFDM receiver, power consumption, System performance, Working environment noise},
	pages = {III--445-- III--448 vol.3},
}

@inproceedings{yan_wang_performance_2002,
	title = {Performance study of {OFDM} receiver using {FFT} based on log number system},
	volume = {3},
	isbn = {0-7803-7484-3},
	doi = {10.1109/VTC.2002.1002816},
	abstract = {In this paper, we study the performance of the OFDM receiver using FFT based on the log number system (Log-FFT) in a wireless environment. By using the log number system (LNS), complex multiplications of the FFT are reduced to simple additions. The effect of finite bit precision on the receiver performance is analyzed theoretically under the AWGN channel. Simulation results for both AWGN and fading channels are presented. It is shown that the bit width requirement of the receiver is quite small. In a coded OFDM system, there is no degradation in bit error rate performance when only two fractional bits are used for the LNS under a slow fading channel. The size of the look-up tables are small and the complexity of the log-FFT implementation is simple. Thus log-FFT is an attractive implementation method for the OFDM receiver design in wireless environment.},
	language = {English},
	booktitle = {Vehicular {Technology} {Conference}, 2002. {VTC} {Spring} 2002. {IEEE} 55th},
	publisher = {IEEE},
	author = {Yan Wang and Chi-Ying Tsui and Cheng, R. S and Wai Ho Mow},
	year = {2002},
	keywords = {coded OFDM system, log-FFT, Additive white noise, AWGN channel, AWGN channels, bit error rate performance, bit width requirement, complexity, error statistics, Fading, fading channels, finite bit precision, Gaussian noise, log number system, OFDM receiver, radio receivers, slow fading channel},
	pages = {1257-- 1259 vol.3},
}

@inproceedings{arnold_improved_2002,
	title = {Improved cotransformation for {LNS} subtraction},
	volume = {2},
	isbn = {0-7803-7448-7},
	doi = {10.1109/ISCAS.2002.1011462},
	abstract = {Two co-transformations have been proposed previously to avoid interpolation difficulties for logarithmic subtraction: Arnold's and Coleman's. We show these two are closely related, but that Arnold's is considerably more accurate in the worst case. Coleman's hardware is more convenient than Arnold's original method because it works with negative arguments. This paper gives a new variant of Arnold's co-transformation that works with negative arguments using hardware similar to Coleman's while maintaining superior accuracy. This reduces the need for input guard bits to an LNS interpolator, which in turn reduces the size of its multiplier(s)},
	language = {English},
	booktitle = {{IEEE} {International} {Symposium} on {Circuits} and {Systems}, 2002. {ISCAS} 2002},
	publisher = {IEEE},
	author = {Arnold, M. G},
	year = {2002},
	keywords = {error analysis, signal processing, Energy consumption, Arnold co-transformation, Coleman co-transformation, improved cotransformation, interpolation difficulties, LNS interpolator, Multimedia systems, multiplier size reduction, negative arguments},
	pages = {II--752-- II--755 vol.2},
}

@inproceedings{lewis_114_1995,
	title = {114 {MFLOPS} logarithmic number system arithmetic unit for {DSP} applications},
	isbn = {0-7803-2495-1},
	doi = {10.1109/ISSCC.1995.535287},
	abstract = {Logarithmic number system (LNS) arithmetic, which represents real numbers by their logarithm in base two, offers inexpensive, error-free multiplication and division, as well as better error characteristics than floating point (FP) arithmetic, but difficult addition/subtraction. While most DSPs use fixed-point arithmetic, floating point would be attractive if it could be achieved at low cost. This paper describes an LNS core that achieves better area than contemporary FP processors. The new approach uses a function interpolator using stored function values, represented in a new interleaved ROM architecture},
	language = {English},
	booktitle = {Solid-{State} {Circuits} {Conference}, 1995. {Digest} of {Technical} {Papers}. 42nd {ISSCC}, 1995 {IEEE} {International}},
	publisher = {IEEE},
	author = {Lewis, D. M},
	month = feb,
	year = {1995},
	keywords = {ALU, LNS, Signal generators, signal processing, digital signal processing, SILICON, DSP, CMOS double well process, error-free division, error-free multiplication, function interpolator, interleaved ROM architecture, interleaved storage, stored function values},
	pages = {86--87, 344},
}

@inproceedings{sacha_logarithmic_1998,
	title = {The logarithmic number system for strength reduction in adaptive filtering},
	isbn = {1-58113-059-7},
	abstract = {An important technique for reducing power consumption in VLSI systems is strength reduction, the substitution of a less-costly operation such as a shift, for a more-costly operation such a multiplication. Using a logarithmic number representation provides several opportunities for strength reductions; in particular, multiplication is performed as the fixed-point addition of logarithms, and extracting a square root is implemented via a shift. These reductions occur transparently at the hardware level; consequently relatively little algorithmic modification is required, and they are readily applicable to adaptive filtering. For performing Givens rotations in the QR decomposition recursive least squares adaptive filter, logarithmic arithmetic is shown to compare favorably to other strength reduction techniques, such as CORDIC arithmetic, in terms of switched capacitance and numerical accuracy.},
	language = {English},
	booktitle = {1998 {International} {Symposium} on {Low} {Power} {Electronics} and {Design}, 1998. {Proceedings}},
	publisher = {IEEE},
	author = {Sacha, J. R and Irwin, M. J},
	month = aug,
	year = {1998},
	keywords = {LNS, filter, applications, adaptive filtering, Adaptive filters, capacitance, fixed-point addition, Givens rotations, numerical accuracy, power consumption reduction, QR decomposition RLS filter, recursive least squares adaptive filter, square root extraction, strength reduction, switched capacitance, VLSI systems},
	pages = {256--261},
}

@article{mahalingam_improving_2006,
	title = {Improving {Accuracy} in {Mitchell}'s {Logarithmic} {Multiplication} {Using} {Operand} {Decomposition}},
	volume = {55},
	issn = {0018-9340},
	doi = {10.1109/TC.2006.198},
	abstract = {Logarithmic number systems (LNS) offer a viable alternative in terms of area, delay, and power to binary number systems for implementing multiplication and division operations for applications in signal processing. The Mitchell algorithm (MA), proposed, reduces the complexity of finding the logarithms and the antilogarithms using piecewise straight line approximations of the logarithm and the antilogarithm curves. The approximations, however, result in some loss of accuracy. Thus, several methods have been proposed in the literature for improving the accuracy of Mitchell's algorithm. In this work, we investigate a new method based on operand decomposition (OD) to improve the accuracy of Mitchell's algorithm when applied to logarithmic multiplication. In the OD technique proposed, for reducing the amount of switching activity in binary multiplication, the two inputs to be multiplied are together decomposed into four binary operands and the product is expressed as the sum of the products of the decomposed numbers. We show that applying operand decomposition to the inputs as a preprocessing step to Mitchell's multiplication algorithm significantly improves the accuracy. Experimental results indicate that the proposed algorithm for logarithmic multiplication reduces the error percentage of Mitchell's algorithm by 44.7 percent on the average. It is also shown that the OD method yields further improvement when combined with the other correction methods proposed in the literature},
	language = {English},
	number = {12},
	journal = {IEEE Transactions on Computers},
	author = {Mahalingam, V. and Ranganathan, N.},
	month = dec,
	year = {2006},
	keywords = {error analysis, signal processing, Computational complexity, antilogarithm curve, binary multiplication algorithm, binary number system, Data preprocessing, Discrete cosine transforms, division operation, interpolation., Mitchell logarithmic multiplication algorithm, multiplication operation, operand decomposition, piecewise straight line approximation},
	pages = {1523--1535},
}

@inproceedings{litchfield_use_2005,
	title = {The use of hybrid logarithmic arithmetic for root raised cosine matched filters in {WCDMA} downlink receivers},
	volume = {1},
	isbn = {0-7803-8966-2},
	doi = {10.1109/WCNC.2005.1424568},
	abstract = {The paper compares and contrasts the performance of a root raised cosine matched filter implemented using hybrid logarithmic arithmetic with that of standard binary and floating point implementations. Hybrid logarithmic arithmetic is advantageous for FIR digital filters since it removes the necessity for the use of high speed array multipliers. These can be replaced by simple lookup table structures for conversion to and from the logarithmic domain. Matlab simulations of the hybrid logarithmic structure show that its performance is superior to that of recently published fixed point solutions, while offering a significantly reduced complexity when compared to floating point equivalents proposed for the WCDMA downlink in receiver applications. The use of hybrid logarithmic arithmetic also has the potential to reduce the power consumption, latency and hardware complexity for mobile handset applications.},
	language = {English},
	booktitle = {2005 {IEEE} {Wireless} {Communications} and {Networking} {Conference}},
	publisher = {IEEE},
	author = {Litchfield, C. and Langley, R. J and Lee, P. and Batchelor, J.},
	month = mar,
	year = {2005},
	keywords = {hybrid, LNS, applications, Energy consumption, power consumption, radio receivers, array multipliers, binary arithmetic, circuit complexity, code division multiple access, Downlink, FIR digital filters, hybrid logarithmic arithmetic, latency, lookup table structures, matched filters, mobile handset, mobile handsets, Multiaccess communication, root raised cosine matched filters, third generation wireless mobile telephony},
	pages = {596-- 600 Vol. 1},
}

@inproceedings{zhang_programmable_2004,
	title = {A programmable base {MDLNS} {MAC} with self-generated lookup table},
	isbn = {0-7695-2182-7},
	doi = {10.1109/IWSOC.2004.1319850},
	abstract = {This paper presents an new architecture for a programmable second base multi-dimensional logarithmic number system (MDLNS) multiply accumulator cell (MAC) using DRAM to store the conversion lookup table (LUT). It uses a direct mapping from nonbinary exponents to binary format with a more than 50\% reduction in DRAM size compared to a recently reported architecture. With a simple modification of the DRAM data loading structure, each MAC can build its own LUT specific to the nonbinary exponents of the corresponding MDLNS coefficient in a pipelined data flow. This results not only in a considerable reduction of DRAM size, but also in the elimination of adders normally required for computing non-binary exponents in a data filtering channel.},
	language = {English},
	booktitle = {4th {IEEE} {International} {Workshop} on {System}-on-{Chip} for {Real}-{Time} {Applications}, 2004.{Proceedings}},
	publisher = {IEEE},
	author = {Zhang, W. and Jullien, G. A and Dimitrov, V. S},
	month = jul,
	year = {2004},
	keywords = {digital signal processing, direct mapping, DRAM chips, DRAM data loading structure, Multidimensional systems, multiply accumulator cell, programmable base MDLNS MAC, self-generated lookup table},
	pages = {61-- 64},
}

@inproceedings{tichy_fpga_2006,
	title = {{FPGA} {Implementation} of {Adaptive} {Filters} based on {GSFAP} using {Log} {Arithmetic}},
	isbn = {1-4244-0383-9},
	doi = {10.1109/SIPS.2006.352602},
	abstract = {Adaptive filters are used in many applications of digital signal processing. Digital communications and digital video broadcasting are just two examples. The GSFAP algorithm, discussed in the paper, is characterized by convergence superior to the popular NLMS, with only slightly higher complexity. The paper deals with floating-point-like implementation of algorithm using FPGA hardware. We present an optimized core for the GSFAP, built using logarithmic arithmetic which provides very low cost multiplication and division. The design is crafted to make efficient use of the pipelined logarithmic addition units. The resulting GSFAP core can be clocked at more than 80 MHz on the one million gate Xilinx XC2VI000-4 device. It can be used to implement filters of orders 20 to 1000 with a sampling rate exceeding 50 kHz. For comparison, we implemented a similar NLMS core and found that although it is slightly smaller than the GSFAP core and it allows a higher signal sampling rate (around 70 kHz) for the corresponding filter orders, GSFAP has adaptation properties that are much superior to NLMS, and that our core can provide very sophisticated adaptive filtering capabilities for resource-constrained embedded systems},
	language = {English},
	booktitle = {{IEEE} {Workshop} on {Signal} {Processing} {Systems} {Design} and {Implementation}, 2006. {SIPS} '06},
	publisher = {IEEE},
	author = {Tichy, M. and Schier, J. and Gregg, D.},
	month = oct,
	year = {2006},
	keywords = {Cost function, digital signal processing, Adaptive filters, adaptive filter, Digital communication, Digital video broadcasting, floating-point-like implementation, FPGA hardware, GSFAP algorithm, pipelined logarithmic addition unit, Xilinx XC2VI000-4 device},
	pages = {321--326},
}

@article{kurokawa_error_1980,
	title = {Error analysis of recursive digital filters implemented with logarithmic number systems},
	volume = {28},
	issn = {0096-3518},
	doi = {10.1109/TASSP.1980.1163466},
	abstract = {This paper presents an analysis of roundoff error accumulation in the direct realization of a logarithmic-arithmetic digital filter and formulas for computing the ratio of the rms value of the roundoff error and that of the output signal of the digital filter. It is shown that for the case of stochastic input, the theoretical error to signal ratio is less using logarithmic number systems as compared to using floating-point number systems. The theoretical results of the roundoff error analysis were verified by simulation experiments. The experimental results demonstrate that a logarithmic number system gives filtering performance superior to that of a floating-point system of equivalent word length and range, and that the limitation in implementing digital filters with logarithmic number systems is a function of the range of the numbers which may be represented.},
	language = {English},
	number = {6},
	journal = {IEEE Transactions on Acoustics, Speech and Signal Processing},
	author = {Kurokawa, T. and Payne, J. and Lee, S.},
	month = dec,
	year = {1980},
	keywords = {error analysis, Stochastic systems},
	pages = {706-- 715},
}

@article{kingsbury_erratum:_1971,
	title = {Erratum: {Digital} filtering using logarithmic arithmetic},
	volume = {7},
	issn = {0013-5194},
	shorttitle = {Erratum},
	doi = {10.1049/el:19710135},
	language = {English},
	number = {8},
	journal = {Electronics Letters},
	author = {Kingsbury, N. G and Rayner, P. J.W},
	month = apr,
	year = {1971},
}

@inproceedings{lee_logtotem:_2007,
	title = {{LogTOTEM}: {A} {Logarithmic} {Neural} {Processor} and its {Implementation} on an {FPGA} {Fabric}},
	isbn = {978-1-4244-1379-9},
	shorttitle = {{LogTOTEM}},
	doi = {10.1109/IJCNN.2007.4371396},
	abstract = {This paper describes the design of a neural network architecture optimised for use with the reactive Tabu search (RTS) training algorithm. The neural network is built using the hybrid-logarithmic number system (hybrid-LNS) instead of the traditional fixed-point methods for the multiply-accumulate (MAC) unit contained in each neuron. The circuits have been designed and implemented using between 4 and 8 bits of fractional precision for the logarithmic representation of the weights and the data. The architecture is based on the existing TOTEM VLSI chip and contains 32 neurons each having a 256 times 10-bit weight RAM. The device has been implemented on a Virtex XCV600 device where it consumed less 6025 slices with 4 bits of fractional precision of the logarithms and 6280 slices with 5 bits of fractional precision. At 4-bits This represents a (45\%) reduction in logic resources required by the neuron array and an overall reduction of 10\% of the FPGA resources when compared to the SoftTOTEM device built using the same technology.},
	language = {English},
	booktitle = {International {Joint} {Conference} on {Neural} {Networks}, 2007. {IJCNN} 2007},
	publisher = {IEEE},
	author = {Lee, P. and Costa, E. and McBader, S. and Clementel, L. and Sartori, A.},
	month = aug,
	year = {2007},
	keywords = {search problems, combinatorial optimisation problem, Fabrics, FPGA fabric, fractional precision, hybrid-logarithmic number system, learning (artificial intelligence), logarithmic neural processor, logic arrays, Logic devices, multiply-accumulate unit, neural chips, neural network architecture, optimisation, reactive tabu search training algorithm, VLSI chip},
	pages = {2764--2769},
}

@inproceedings{stouraitis_efficient_1989,
	title = {An efficient {VLSI} implementation of logarithmic signal processors},
	doi = {10.1109/ISCAS.1989.100652},
	abstract = {A hybrid logarithmic processor based on the logarithmic number system (LNS) is introduced The LNS exponents of the operands are represented internally using the signed-digit (SD) number system. The LNS exponents, represented traditionally as fixed-point or sign-magnitude numbers, are converted to an SD format and then processed. This allows the parallelism offered by the SD number system at the digital level to be exploited for the implementation of the various operations. In order to reduce the size of the memory tables required for LNS operations like addition to subtraction, a technique for parallel conversion of SD to sign-magnitude numbers is developed. The new processor compares favorably to a previously developed logarithmic processor in terms of computational speed. It also results in a more regular and modal VLSI implementation},
	language = {English},
	booktitle = {, {IEEE} {International} {Symposium} on {Circuits} and {Systems}, 1989},
	publisher = {IEEE},
	author = {Stouraitis, T.},
	month = may,
	year = {1989},
	keywords = {LNS, Digital signal processing chips, signal processing, DSP, hybrid logarithmic processor, logarithmic signal processors, memory tables, Samarium, VLSI implementation},
	pages = {1540--1543 vol.3},
}

@inproceedings{arnold_residue_2011,
	title = {A {Residue} {Logarithmic} {Number} {System} {ALU} using interpolation and cotransformation},
	doi = {10.1109/ASAP.2011.6043281},
	abstract = {The Residue Logarithmic Number System (RLNS) uses the Residue Number System (RNS) to represent logarithms that represent real values. Multiplication and division are easy; reasonable-precision addition and subtraction have not been economical because of RNS sign-detection. This paper adapts novel interpolation (for addition) and cotransformation (for subtraction) to fit the sign-detection limits. Smaller than prior RLNS hardware, the novel ALU defers sign detection with two speculative datapaths.},
	booktitle = {2011 {IEEE} {International} {Conference} on {Application}-{Specific} {Systems}, {Architectures} and {Processors} ({ASAP})},
	author = {Arnold, M.G. and Kouretas, I. and Paliouras, V.},
	month = sep,
	year = {2011},
	keywords = {Computers, cotransformation, interpolation, Logic gates, Program processors, residue logarithmic number system ALU, residue number system, residue number systems, RLNS hardware, RNS sign-detection},
	pages = {255--258},
}

@article{arnold_real/complex_2011,
	title = {A {Real}/{Complex} {Logarithmic} {Number} {System} {ALU}},
	volume = {60},
	issn = {0018-9340},
	doi = {10.1109/TC.2010.154},
	abstract = {The real Logarithmic Number System (LNS) offers fast multiplication but uses more expensive addition. Cotransformation and higher order table methods allow real LNS ALUs with reasonable precision on Field-Programmable Gate Arrays (FPGAs). The Complex LNS (CLNS) is a generalization of LNS, which represents complex values in log-polar form. CLNS is a more compact representation than traditional rectangular methods, reducing bus and memory cost in the FFT; however, prior CLNS implementations were either slow CORDIC-based or expensive 2D-table-based approaches. Instead, we reuse real LNS hardware for CLNS, with specialized hardware (including a novel log sin that overcomes singularity problems) that is smaller than the real-valued LNS ALU to which it is attached. All units were derived from the Floating-Point-Cores (FloPoCo) library. FPGA synthesis shows our CLNS ALU is smaller than prior fast CLNS units. We also compare the accuracy of prior and proposed CLNS implementations. The most accurate of the proposed methods increases the error in radix-two FFTs by less than half a bit, and a more economical FloPoCo-based implementation increases the error by only one bit.},
	number = {2},
	journal = {IEEE Transactions on Computers},
	author = {Arnold, M.G. and Collange, S.},
	month = feb,
	year = {2011},
	keywords = {complex arithmetic, Complex arithmetic, complex LNS, Computer science, Digital arithmetic, fast Fourier transform, fast Fourier transforms, FFT, field programmable gate arrays, field-programmable gate arrays, Fixed-point arithmetic, Flexible printed circuits, floating-point-cores library, FPGA, hardware function evaluation, Libraries, real LNS hardware, real-valued LNS ALU, VHDL.},
	pages = {202--213},
}

@phdthesis{garcia_applying_2004,
	title = {Applying the {Logarithmic} {Number} {System} to {Application}-{Specific} {Designs}},
	school = {Lehigh University},
	author = {Garcia, Jesus},
	year = {2004},
}

@article{arnold_applying_1992,
	title = {Applying features of {IEEE} 754 to sign/logarithm arithmetic},
	volume = {41},
	issn = {0018-9340},
	doi = {10.1109/12.156547},
	abstract = {Various features found in standard floating point arithmetic (IEEE 754) are examined in light of their appropriateness for sign/logarithm arithmetic. The emphasis is on a 32-b word size comparable to IEEE 754 single precision, although other word sizes are possible. A multilayer sign/logarithm format is considered. The lowest layer, similar to previous implementations, would provide only normalized representations but would not provide representations for zero, denormalized values, infinities, and NaNs. The highest layer would provide most of the features found in IEEE 754, including zeros, denormalized values, infinities, and NaNs. Novel algorithms for implementing logarithmic denormalized arithmetic are presented. Simulation results show that the error characteristics of the proposed logarithmic denormalized arithmetic algorithms are similar to those of the denormalized floating point arithmetic in IEEE 754},
	language = {English},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Arnold, M. G and Bailey, T. A and Cowles, J. R and Winkel, M. D},
	month = aug,
	year = {1992},
	keywords = {denormalized values, Digital arithmetic, H infinity control, IEEE 754, infinities, logarithmic denormalized arithmetic algorithms, multilayer sign/logarithm format, NaNs, Nonhomogeneous media, number theory, sign/logarithm arithmetic, standard floating point arithmetic, standards, standards., zeros},
	pages = {1040--1050},
}

@article{lan-da_van_power-area_2011,
	title = {A {Power}-{Area} {Efficient} {Geometry} {Engine} {With} {Low}-{Complexity} {Subdivision} {Algorithm} for 3-{D} {Graphics} {System}},
	volume = {58},
	issn = {1549-8328, 1558-0806},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5741869},
	doi = {10.1109/TCSI.2011.2123430},
	number = {9},
	urldate = {2015-07-05},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {{Lan-Da Van} and {Ten-Yao Sheu}},
	month = sep,
	year = {2011},
	pages = {2211--2224},
}

@article{li_novel_2012,
	title = {A {Novel} {Hardware} {Implementation} for {Specular} {Intensity} of {Phong} {Shading} {Used} in {Embedded} {Graphic} {Applications}},
	volume = {229-231},
	issn = {1662-7482},
	url = {http://www.scientific.net/AMM.229-231.1146},
	doi = {10.4028/www.scientific.net/AMM.229-231.1146},
	urldate = {2015-07-05},
	journal = {Applied Mechanics and Materials},
	author = {Li, Bing Chao and Wei, Ji Zeng and Chang, Yi Song and Guo, Wei and Sun, Ji Zhou},
	month = nov,
	year = {2012},
	pages = {1146--1149},
}

@article{chang_novel_2007,
	title = {A {Novel} {Envelope} {Detector} for {High}-{Frame} {Rate}, {High}-{Frequency} {Ultrasound} {Imaging}},
	volume = {54},
	issn = {0885-3010},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4337739},
	doi = {10.1109/TUFFC.2007.463},
	number = {9},
	urldate = {2015-07-05},
	journal = {IEEE Transactions on Ultrasonics, Ferroelectrics and Frequency Control},
	author = {Chang, Jin and Yen, Jesse and Shung, K.},
	month = sep,
	year = {2007},
	pages = {1792--1801},
}

@article{mukherjee_novel_2010,
	title = {A novel architecture for conversion of binary to single digit double base numbers},
	volume = {38},
	issn = {01635964},
	url = {http://portal.acm.org/citation.cfm?doid=1978907.1978909},
	doi = {10.1145/1978907.1978909},
	language = {en},
	number = {5},
	urldate = {2015-07-05},
	journal = {ACM SIGARCH Computer Architecture News},
	author = {Mukherjee, Manideepa and Sinha, Amitabha},
	month = apr,
	year = {2010},
	keywords = {conversion, DBNS},
	pages = {1},
}

@article{babic_iterative_2011,
	title = {An iterative logarithmic multiplier},
	volume = {35},
	issn = {0141-9331},
	url = {http://www.sciencedirect.com/science/article/pii/S0141933110000438},
	doi = {10.1016/j.micpro.2010.07.001},
	abstract = {Digital signal processing algorithms often rely heavily on a large number of multiplications, which is both time and power consuming. However, there are many practical solutions to simplify multiplication, like truncated and logarithmic multipliers. These methods consume less time and power but introduce errors. Nevertheless, they can be used in situations where a shorter time delay is more important than accuracy. In digital signal processing, these conditions are often met, especially in video compression and tracking, where integer arithmetic gives satisfactory results. This paper presents a simple and efficient multiplier with the possibility to achieve an arbitrary accuracy through an iterative procedure, prior to achieving the exact result. The multiplier is based on the same form of number representation as MitchellΓÇÖs algorithm, but it uses different error correction circuits than those proposed by Mitchell. In such a way, the error correction can be done almost in parallel (actually this is achieved through pipelining) with the basic multiplication. The hardware solution involves adders and shifters, so it is not gate and power consuming. The error summary for operands ranging from 8 bits to 16 bits indicates a very low relative error percentage with two iterations only. For the hardware implementation assessment, the proposed multiplier is implemented on the Spartan 3 FPGA chip. For 16-bit operands, the time delay estimation indicates that a multiplier with two iterations can work with a clock cycle more than 150 MHz, and with the maximum relative error being less than 2\%.},
	number = {1},
	urldate = {2015-07-05},
	journal = {Microprocessors and Microsystems},
	author = {Babi─ç, Zdenka and Avramovi─ç, Aleksej and Buli─ç, Patricio},
	month = feb,
	year = {2011},
	keywords = {Computer arithmetic, digital signal processing, FPGA, Multiplier},
	pages = {23--33},
}

@article{noetzel_interpolating_1989,
	title = {An interpolating memory unit for function evaluation: analysis and design},
	volume = {38},
	issn = {0018-9340},
	shorttitle = {An interpolating memory unit for function evaluation},
	doi = {10.1109/12.21124},
	abstract = {A technique for the evaluation of a general continuous function f(x) is presented, and the design of an interpolating memory as an implementation of the technique is described. The technique partitions the domain of f(x) into segments and defines an interpolating (or approximating) function for each. The implementation is a memory subsystem that holds the parameters of the approximating functions and yields an interpolated function value on each read reference. Polynomial interpolating functions are considered in particular. Hardware requirements (memory and computational logic) are analyzed in terms of the required precision. It is shown that as long as f(x) has d+1 derivatives, where d is the degree of the interpolating polynomial, d+1 additional bits of precision of the computed f(x) are obtained for each additional address bit used in the interpolating memory. This establishes a tradeoff between memory and computational logic, which can be exploited in the design of a unit for a specific function, for any precision requirement. Furthermore, a single unit can be designed for any class of functions that have the required derivatives. Two examples of implementations for particular functions are presented},
	number = {3},
	journal = {IEEE Transactions on Computers},
	author = {Noetzel, A.S.},
	month = mar,
	year = {1989},
	keywords = {approximating functions, computational logic, Computer applications, Computer errors, Digital arithmetic, function evaluation, general continuous function, interpolating memory unit, interpolation, Linear approximation, logic design, memory subsystem, Piecewise linear approximation, polynomial interpolating functions, signal processing, Table lookup},
	pages = {377--384},
}

@inproceedings{albu_pipelined_2002,
	title = {Pipelined implementations of the a {Priori} {Error}-{Feedback} {LSL} algorithm using logarithmic arithmetic},
	volume = {3},
	isbn = {0-7803-7402-9},
	doi = {10.1109/ICASSP.2002.5745200},
	abstract = {In this paper we present several implementations of the Modified A Priori Error-Feedback LSL (EF-LSL) algorithm [1] on the VIRTEX FPGA. Its computational parallelism and pipelinabilty are important advantages. Internally, the computations are based on the logarithmic number system. We compare 32-bit (SINGLE-ALU or DUAL-ALU version) and 20-bit (QUADRI-ALU versions). We show that the LNS implementation can outperform the standard DSP solutions based on 32-bit floating-point processors.},
	language = {English},
	booktitle = {2002 {IEEE} {International} {Conference} on {Acoustics}, {Speech}, and {Signal} {Processing} ({ICASSP})},
	publisher = {IEEE},
	author = {Albu, Felix and Kadlec, Jiri and Coleman, Nick and Fagan, Anthony},
	month = may,
	year = {2002},
	keywords = {Lead},
	pages = {III--2681--III--2684},
}

@article{lai_efficient_1993,
	title = {The efficient implementation and analysis of a hybrid number system processor},
	volume = {40},
	issn = {1057-7130},
	doi = {10.1109/82.277883},
	abstract = {A hybrid number system processor designed with the antilogarithm programmable logic array (PLA) is described. In the hybrid number system, linear interpolation is used to achieve accurate conversions between floating-point (FLP) and logarithmic number system (LNS) numbers. Originally, a multiplier was used to do the interpolation. Here, the antilogarithm PLA is shown to have smaller silicon area, comparable overall performance, and structured design. The basic arithmetic operations and processor architecture are explained for performing addition, subtraction, multiplication, division, and square root. The conversion errors are analyzed mathematically. The Taylor series approximation is used as the framework for analysis of the conversion errors of logarithm, antilogarithm, multiplication/division, and addition/subtraction operations. The analyses indicate that the Taylor series truncation results in very small error when the ROM size is properly chosen for the desired precision. Consequently, the finite width truncation becomes the major source of conversion errors},
	language = {English},
	number = {6},
	journal = {IEEE Transactions on Circuits and Systems II: Analog and Digital Signal Processing},
	author = {Lai, F. -S},
	month = jun,
	year = {1993},
	keywords = {ALU, hybrid, LNS, error analysis, hybrid number system processor, digital signal processing, SILICON, logic arrays, antilogarithm programmable logic array, finite width truncation, processor architecture, series truncation, Taylor series approximation},
	pages = {382--392},
}

@inproceedings{lai_architecture_1992,
	title = {The architecture and analysis of a hybrid number system processor},
	volume = {2},
	isbn = {0-7803-0593-0},
	doi = {10.1109/ISCAS.1992.230100},
	abstract = {A hybrid number system processor is studied and analyzed. This processor uses the FLP (floating point) to LNS (logarithm number system) conversion algorithm to transform all the incoming 32-b floating-point numbers into 32-b logarithmic numbers. Arithmetic operations are performed in the LNS domain. The output FLP results are also obtained by using the LNS to FLP conversion algorithm. All the arithmetic operations including addition and subtraction can be implemented by using the anti-logarithm PLA (programmable logic array). Error analysis indicates that the Taylor series truncation leads to very small error when the ROM size is properly chosen for the desired precision. Consequently, the finite width truncation becomes the major source of conversion errors},
	language = {English},
	booktitle = {, 1992 {IEEE} {International} {Symposium} on {Circuits} and {Systems}, 1992. {ISCAS} '92. {Proceedings}},
	publisher = {IEEE},
	author = {Lai, F. S},
	month = may,
	year = {1992},
	keywords = {error analysis, hybrid number system processor, SILICON, Differential equations, antilogarithm PLA, Difference equations, Finite difference methods, LNS to FLP conversion algorithm, programmable logic array, Taylor series truncation},
	pages = {803--806 vol.2},
}

@article{arnold_unpublished:_nodate,
	title = {Unpublished: {A} {Pipelined} {LNS} {ALU}},
	author = {Arnold, M. G.},
}

@article{arnold_unpublished:_nodate-1,
	title = {Unpublished: {Error} {Analysis} of the {Kmetz}/{Maenner} {Algorithm}},
	author = {Arnold, M. and Bailey, T. and Cowles, J.},
}

@article{hermanek_fpga_nodate,
	title = {{FPGA} {Implementation} of {Logarithmic} {Unit}},
	author = {Hermanek, A. and Licko, M. and Kadlec, J.},
}

@inproceedings{shenoy_short_1982,
	title = {On {Short} {Term} {Autocorrelation} {Implemented} with {Logarithmic} {Number} {System}},
	booktitle = {{ICASSP} 84},
	author = {Shenoy, V. P. and Taylor, F. J.},
	year = {1982},
	pages = {401--404},
}

@inproceedings{ramaswamy_cmos_1996,
	title = {{CMOS} {VLSI} implementation of a digital logarithmic multiplier},
	volume = {1},
	doi = {10.1109/NAECON.1996.517660},
	abstract = {A fast multiplier based on the logarithmic number system is implemented in a VLSI chip. Multiplication in the decimal number system is equivalent to an addition in the logarithmic number system, thus, the use of logarithms reduce the operation of multiplication to simple addition. Multiplication of two binary numbers can be achieved by adding the binary logarithms of the two numbers and then deriving the antilog of the result. The approximate logarithm of a binary number can be found from the number itself through a process of shifts and counting. This is a simpler design process as compared to storing the logarithms on an on-chip ROM which results in complex hardware as the word length increases. The logarithmic approximation results in some error in the product. This is reduced using an error reduction technique. The presence of error limits the application of this multiplier to applications in signal processing where it is not critical. The design is implemented using a 2.0 micron double metal process},
	booktitle = {Aerospace and {Electronics} {Conference}, 1996. {NAECON} 1996., {Proceedings} of the {IEEE} 1996 {National}},
	author = {Ramaswamy, S. and Siferd, R.E.},
	month = may,
	year = {1996},
	keywords = {Hardware, logarithmic number system, Arithmetic, Signal processing, CMOS, CMOS logic circuits, multiplying circuits, Process design, Very large scale integration, VLSI, Mathematics, Counting circuits, 2.0 micron, antilog, binary logarithms, decimal number system, digital logarithmic multiplier, double metal process, error compensation, Error correction, error reduction technique, Shift registers, word length},
	pages = {291--294 vol.1},
}

@phdthesis{yu_design_1990,
	title = {The {Design} and {Implementation} of a 30b {Logarithmic} {Number} {System} {Processor}},
	school = {University of Toronto},
	author = {Yu, Lawrence},
	year = {1990},
}

@patent{chi_binary_1971,
	title = {Binary arithmetic unit implementing a multiplicative steration for the exponential, logarithm, quotient and square root functions},
	url = {http://www.google.com/patents/US3631230},
	nationality = {United States},
	assignee = {Ibm},
	number = {US3631230 A},
	urldate = {2015-10-17},
	author = {Chi, Chen Tien},
	month = dec,
	year = {1971},
	note = {U.S. Classification 708/231, 708/653, 708/517, 708/233, 708/235, 708/498, 708/490, 708/605; International Classification G06F7/544, G06F7/48; Cooperative Classification G06F7/544; European Classification G06F7/544},
}

@article{arnold_slide_nodate,
	title = {Slide {Rules} for the 21st {Century}: {Logarithmic} {Arithmetic} as a {High}-speed, {Low}-cost, {Low}-power {Alternative} to {Fixed} {Point} {Arithmetic}},
	shorttitle = {Slide {Rules} for the 21st {Century}},
	author = {Arnold, Mark},
}

@article{barlow_roundoff_1985,
	title = {On {Roundoff} {Error} {Distributions} in {Floating} {Point} and {Logarithmic} {Arithmetic}},
	volume = {34},
	issn = {0010-485X},
	url = {http://dx.doi.org/10.1007/BF02251833},
	doi = {10.1007/BF02251833},
	number = {4},
	urldate = {2015-10-17},
	journal = {Computing},
	author = {Barlow, J. L. and Bareiss, E. H.},
	month = sep,
	year = {1985},
	pages = {325--347},
}

@article{huang_32-bit_1996,
	title = {A 32-bit logarithmic number system processor},
	volume = {14},
	issn = {0922-5773},
	url = {http://link.springer.com/article/10.1007/BF00929624},
	doi = {10.1007/BF00929624},
	abstract = {To design a 32-bit logarithmic number system (LNS) processor, this paper presents two novel techniques: Digit-Partition (DP) to design log2(1.x) function and Iterative Difference by Linear Approximation (IDLA) to design 20.x function. The basic concept behind DP is that variablex can be divided into two parts in bit representation to be implemented. Thus, ROM or PLA table can be reduced to a reasonable size and this will make a high precision design allowable. The basic idea of IDLA is that the function 20.x can be obtained approximately through iterative linear approximations. By this method, only adder, shifter and a small PLA are required, unlike the previous designs which require ROM and multiplier. The experiment results reveal that the proposed design is more attractive than the previous researches in the LNS processor.},
	language = {en},
	number = {3},
	urldate = {2015-10-17},
	journal = {Journal of VLSI signal processing systems for signal, image and video technology},
	author = {Huang, Sheng-Chieh and Chen, Liang-Gee and Chen, Thou-Ho},
	month = dec,
	year = {1996},
	keywords = {Circuits and Systems, Computer Imaging, Vision, Pattern Recognition and Graphics, Electrical Engineering, Image Processing and Computer Vision, Pattern Recognition, Signal, Image and Speech Processing},
	pages = {311--319},
}

@article{kalliojarvi_required_1994,
	title = {Required coefficient word length in floating-point and logarithmic digital filters},
	volume = {1},
	issn = {1070-9908},
	doi = {10.1109/97.295322},
	abstract = {The effects of coefficient quantization to the response of a digital filter are studied. Easy-to-use expressions for the required coefficient word length, with which the filter response deviations are within specified bounds, are derived for filters realized with floating-point or logarithmic arithmetic. The required coefficient word lengths of floating-point and fixed-point realizations of filters are compared with simulations.{\textless}{\textgreater}},
	number = {3},
	journal = {IEEE Signal Processing Letters},
	author = {Kallioj├ñrvi, K. and Astola, J.},
	month = mar,
	year = {1994},
	keywords = {digital arithmetic, Quantization, Floating-point arithmetic, Digital signal processing, Digital filters, filtering and prediction theory, coefficient quantization, coefficient word length, filter response deviations, floating-point digital filters, logarithmic digital filters, Passband, Random variables, Roundoff errors, White noise},
	pages = {52--54},
}

@article{chandra_accumulation_1987,
	title = {Accumulation of coefficient roundoff error in fast {Fourier} transforms implemented with logarithmic number system},
	volume = {35},
	issn = {0096-3518},
	doi = {10.1109/TASSP.1987.1165072},
	abstract = {When a fast Fourier transform (FFT) is implemented on a digital computer or with special-purpose hardware, quantization errors will arise due to finite word lengths in the digital system. This correspondence presents an analysis of error accumulation due to coefficient rounding in the FFT implemented with a logarithmic number system. The theoretical result of the coefficient roundoff error analysis is verified by computer simulations. The results indicate that the FFT implemented with the logarithmic number system provides better signal-to-noise performance than that implemented with a fixed-point or floating-point number system.},
	number = {11},
	journal = {IEEE Transactions on Acoustics, Speech and Signal Processing},
	author = {Chandra, D.V.S.},
	month = nov,
	year = {1987},
	keywords = {Hardware, Signal processing, Quantization, Floating-point arithmetic, Signal processing algorithms, Fourier transforms, Roundoff errors, Discrete Fourier transforms, Error analysis, Fast Fourier transforms},
	pages = {1633--1636},
}

@article{clenshaw_unrestricted_1986,
	title = {Unrestricted algorithms for reciprocals and square roots},
	volume = {26},
	issn = {0006-3835, 1572-9125},
	url = {http://link.springer.com/article/10.1007/BF01935054},
	doi = {10.1007/BF01935054},
	abstract = {Algorithms are presented for the computation of reciprocals of nonzero real numbers and square roots of positive numbers. There are no restrictions on the range of the numbers or on the precision that may be demanded in the results.},
	language = {en},
	number = {4},
	urldate = {2015-10-17},
	journal = {BIT Numerical Mathematics},
	author = {Clenshaw, C. W. and Olver, F. W. J.},
	month = dec,
	year = {1986},
	keywords = {computer arithmetic, Error analysis, Computational Mathematics and Numerical Analysis, Mathematics, general, multiple-precision software, Numeric Computing, Primary 65D20, relative precision, unrestricted alborithms},
	pages = {475--492},
}

@article{feucht_logarithmic_1989,
	title = {Logarithmic {Number} {Representation} in {Forth}},
	volume = {5},
	issn = {0738-2022},
	url = {http://dl.acm.org/citation.cfm?id=70811.70813},
	number = {2},
	urldate = {2015-10-17},
	journal = {J. FORTH Appl. Res.},
	author = {Feucht, D. L.},
	month = apr,
	year = {1989},
	pages = {271--286},
}

@article{gonzalez_redundant_2000,
	title = {Redundant arithmetic, algorithms and implementations},
	volume = {30},
	issn = {0167-9260},
	url = {http://www.sciencedirect.com/science/article/pii/S0167926000000158},
	doi = {10.1016/S0167-9260(00)00015-8},
	abstract = {Performance in many very-large-scale-integrated (VLSI) systems such as digital signal processing (DSP) chips, is predominantly determined by the speed of arithmetic modules like adders and multipliers. Even though redundant arithmetic algorithms produce significant improvements in performance through the elimination of carry propagation, efficient circuit implementations of these algorithms have been traditionally difficult to obtain. This work presents a survey of circuit implementations of redundant arithmetic algorithms. The described implementations are divided into three main groups: (1) conventional binary logic circuits, which encode the multivalued digits of redundant arithmetic into two or more binary digital signals; (2) current-mode multiple-valued logic circuits, which directly represent multivalued redundant digits using non-binary digital current signals; and (3) heterostructure and quantum electronic circuits, intended for very compact designs capable of operating at extremely high speeds. For each of the circuits, the operating principle is described and the main advantages and disadvantages of the approach are discussed and compared.},
	number = {1},
	urldate = {2015-10-17},
	journal = {Integration, the VLSI Journal},
	author = {Gonz├ílez, Alejandro F. and Mazumder, Pinaki},
	month = nov,
	year = {2000},
	keywords = {Current-mode logic, Multiple-valued logic, Quantum electronic circuits, Redundant binary logic, Redundant number systems},
	pages = {13--53},
}

@article{jullien_fast_1971,
	title = {Fast algorithm for digital logarithmic conversion},
	volume = {7},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19710148},
	doi = {10.1049/el:19710148},
	abstract = {The use of homomorphic filtering in many problems involving nonlinear combination of signals requires complex logarithmic converters. A fast algorithm for digital logarithmic conversion is developed which uses simple computer manipulations. The algorithm trades accuracy for speed, but is found to be adequate in a number of applications tested so far.},
	language = {en},
	number = {9},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Jullien, G.A.},
	year = {1971},
	pages = {218},
}

@article{wan_efficient_1999,
	title = {Efficient conversion algorithms for long-word-length binary logarithmic numbers and logic implementation},
	volume = {146},
	issn = {13502387},
	url = {http://digital-library.theiet.org/content/journals/10.1049/ip-cdt_19990791},
	doi = {10.1049/ip-cdt:19990791},
	abstract = {The logarithmic number system is an attractive alternative to the conventional number systems when data need to be manipulated at very high rate over a wide data range. However, the major problem is deriving logarithms and antilogarithms quickly and accurately enough to allow conversions to and from the conventional number representations. This paper presents efficient algorithms that convert the conventional binary numbers to binary logarithmic numbers, where long-word-length numbers are considered. The conversion problem can be formulated as a division-like problem. This implementation adopts the modified SRT division scheme so that the full-length addition/subtraction operations can be avoided. The speed performance of the logic implementation has been evaluated based on the TSMC 0.8╬╝m SPDM CMOS process. Results show that, for the numbers in IEEE double precision format with 53 bits in the fractional part and with additional 7 guarding digits for maintaining the accuracy, it takes about 0.4╬╝s to convert a number, where the ROM table size is 128-by-60 bits, or 7.5 kbits. The speed performances of the logic implementation for long-word-length, such as 128 bits, 256 bits, and 512 bits, are also evaluated in terms of the required ROM table size and delay time. The algorithm can handle any arbitrary word length with the required accuracy at reasonable speed.},
	language = {English},
	number = {6},
	urldate = {2015-10-13},
	journal = {IEE Proceedings - Computers and Digital Techniques},
	author = {Wan, Y. and Khalil, M.A. and Wey, C.-L.},
	year = {1999},
	pages = {295},
}

@article{dean_design_1968,
	title = {Design of binary logarithm generators},
	volume = {115},
	issn = {00203270},
	url = {http://digital-library.theiet.org/content/journals/10.1049/piee.1968.0198},
	doi = {10.1049/piee.1968.0198},
	abstract = {A design method is described by which a number x, in binary code, can be used to generate the binary form of log2x. Unlike earlier methods, this does not depend on an approximation to a linear relatioqship between x and log2x. The mantissa of the logarithm can be generated with an adequate number of bits, without undue increase in the complexity of the system. However, the system becomes more complex when the number of bits in x is increased. The design is illustrated with 8 bits of log2x and up to 6 bits of x.},
	language = {English},
	number = {8},
	urldate = {2015-10-13},
	journal = {Proceedings of the Institution of Electrical Engineers},
	author = {Dean, K.J.},
	year = {1968},
	pages = {1118},
}

@article{schleher_numerical_1980,
	title = {Numerical evaluation of logarithmic receiver thresholds},
	volume = {16},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19800624},
	doi = {10.1049/el:19800624},
	abstract = {Numerical methods for evaluating detection thresholds of logarithmic receivers are described and compared. The f.f.t. and importance sampling methods provide good accuracy for a small to medium range of samples. Helstrom\&apos;s method and the GramΓÇôCharlier series provide good accuracy for a large number of samples.},
	language = {English},
	number = {23},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Schleher, D.C.},
	year = {1980},
	pages = {875},
}

@article{hernandez_noise_1999,
	title = {Noise shaping modulator with logarithmic response},
	volume = {35},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19990690},
	doi = {10.1049/el:19990690},
	abstract = {A discrete-time noise-shaping modulator is shown to encode the logarithm of its input without using logarithmic or exponential elements. Used as an A/D converter, the proposed modulator may replace a logarithmic amplifier followed by a uniform quantiser. Used as a D/A converter, it may replace a multibit piecewise logarithmic circuit with a single-bit circuit.},
	language = {en},
	number = {12},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Hern├índez, L. and Pat├│n, S.},
	year = {1999},
	pages = {955},
}

@article{lee_modular_1998,
	title = {Modular leading one detector for logarithmic encoder},
	volume = {34},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19980563},
	doi = {10.1049/el:19980563},
	abstract = {A modular circuit for determining the leading one in a binary word is described. The circuit, which was principally designed for encoding binary data into a binary logarithm format, can also be used for floating point normalisation. Its similarity to the Manchester carry adder can be exploited to provide fast ΓÇÿlook-aheadΓÇÖ or ΓÇÿcarry-skipΓÇÖ stages where necessary.},
	language = {English},
	number = {8},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Lee, P. and Sartori, A.},
	year = {1998},
	pages = {727},
}

@article{nicoud_logarithmic_1971,
	title = {Logarithmic convertor},
	volume = {7},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19710155},
	doi = {10.1049/el:19710155},
	abstract = {A specialised system for computing logarithms and anti-logarithms in binary form is described. A great simplicity is obtained if the base is of the form 1+2ΓêÆk. The precision is discussed and two examples are given. The computing time is, with t.t.l. circuits, of the order of 1 ms in the usual range of the analogue logarithmic convertors, and does not increase very much when the range of the numbers and the precision increase.},
	language = {English},
	number = {9},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Nicoud, J.D. and Dessoulavy, R.},
	year = {1971},
	pages = {230},
}

@article{preethy_rns-based_2000,
	title = {{RNS}-based logarithmic adder},
	volume = {147},
	issn = {13502387},
	url = {http://digital-library.theiet.org/content/journals/10.1049/ip-cdt_20000529},
	doi = {10.1049/ip-cdt:20000529},
	abstract = {The operation of logarithmic addition has always been burdened with large volumes of look-up tables. Therefore with a goal of reducing the ROM size required, an elegant and novel technique for logarithmic addition using the residue number system is demonstrated. To formulate this technique, the properties of finite fields and finite rings are exploited. A multiple-base logarithm is defined first, which is then successfully used for the formulation of the proposed technique for logarithmic addition. With this approach, the ROM requirement has been reduced to a bare minimum, thereby reducing the complexity of logarithmic addition, and permitting an elegant and efficient implementation.},
	language = {en},
	number = {4},
	urldate = {2015-10-13},
	journal = {IEE Proceedings - Computers and Digital Techniques},
	author = {Preethy, A.P. and Radhakrishnan, D.},
	year = {2000},
	pages = {283},
}

@article{reiss_response_1968,
	title = {Response of logarithmic amplifiers to noise signals},
	volume = {4},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19680218},
	doi = {10.1049/el:19680218},
	abstract = {Tuned logarithmic amplifiers have shown a response to noise and radar clutter contrary to accepted theory in that the spread of the output probability-density function increases with increasing inputs. This effect is due to conversion of phase to amplitude modulation in the filters, and a remedy is described.},
	language = {English},
	number = {14},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Reiss, A. and Carver, G.W.},
	year = {1968},
	pages = {283},
}

@article{zhang_resonator_1992,
	title = {Resonator based logarithmic filter banks},
	volume = {139},
	issn = {09563776},
	url = {http://digital-library.theiet.org/content/journals/10.1049/ip-i-2.1992.0006},
	doi = {10.1049/ip-i-2.1992.0006},
	abstract = {The paper provides a technique to design and approximate computationally efficient digital filter banks whose centre frequencies are spaced logarithmically. The design procedure consists of two steps: The design of ΓÇÿmotherΓÇÖ filter banks and the frequency windowing processing for the final filter banks. The resonator with the purely imaginary transfer function on the unit circle is treated as the basic element of the mother bank and the frequency interpolating filter bank structure is applied. Different pole-zero structures are studied and an infinite filter bank is explored from the theoretical point of view. The outputs of the mother filter banks are weighted and summed to produce the final banks with significantly improved responses. Linear programming is applied to find the optimal weighting coefficients, and the experiments for a variety of windows are made with a discussion of the results and some tradeoffs for window selection. The results show that these filter banks have good frequency response and allow control of crossover gain, and they are useful for voice and music analysis and tone receivers.},
	language = {English},
	number = {1},
	urldate = {2015-10-13},
	journal = {IEE Proceedings I Communications, Speech and Vision},
	author = {Zhang, Genzao and McGee, W.F.},
	year = {1992},
	keywords = {LNS, filter},
	pages = {36},
}

@article{engel_switched-capacitor_1999,
	title = {Switched-capacitor logarithmic {DAC}},
	volume = {35},
	copyright = {┬⌐ IEE},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19990103},
	doi = {10.1049/el:19990103},
	abstract = {An accurate, low-power, switched-capacitor (SC) digital-to-analogue converter (DAC) with exponential characteristics is presented. The design represents a significant improvement in performance and reduction in complexity over previously reported logarithmic DACs.},
	language = {English},
	number = {2},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Engel, G.L.},
	year = {1999},
	pages = {111},
}

@article{sicuranza_fast_1983,
	title = {Fast realisation of 2-{D} digital filters using logarithmic number systems},
	volume = {19},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19830307},
	doi = {10.1049/el:19830307},
	abstract = {Previous papers of mine have discussed the approximation of 2-D digital filter coefficients with algebraic sums of integer powers of the base in a logarithmic number system. The results already obtained suggest a sequential memory-oriented realisation which is faster than the standard implementation.},
	language = {English},
	number = {12},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Sicuranza, G.L.},
	year = {1983},
	pages = {449},
}

@inproceedings{ismail_interpolator_2012,
	title = {Interpolator algorithms for approximating the {LNS} addition and subtraction: {Design} and analysis},
	isbn = {978-1-4673-3119-7 978-1-4673-3117-3 978-1-4673-3118-0},
	shorttitle = {Interpolator algorithms for approximating the {LNS} addition and subtraction},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6408336},
	doi = {10.1109/ICCircuitsAndSystems.2012.6408336},
	abstract = {The logarithmic number system (LNS) can be considered a good alternative to floating-point, specifically for applications that require a wide range of dynamic numbers for arithmetic operations. To date, its implementation is still restricted by the complexity of performing addition and subtraction operations as a result of using large lookup tables. In previous works, interpolation has been widely used to approximate these non-linear functions. Therefore in this paper, an analysis is presented to identify the most suitable algorithm to be employed for approximating the LNS addition and subtraction functions at 32-bit precisions. The selection is based on the minimum amount of storage that can be attained whilst maintaining its accuracy within the floating-point (FLP) limit. From the results it is clear that there is a potential procedure which can fulfil the above criteria, and that could possibly be applied in the future implementation of an LNS system.},
	booktitle = {2012 {IEEE} {International} {Conference} on {Circuits} and {Systems} ({ICCAS})},
	publisher = {IEEE},
	author = {Ismail, R.C. and Hussin, R. and Murad, S.A.Z.},
	month = oct,
	year = {2012},
	keywords = {Interpolation, Table lookup, logarithmic number system, Polynomials, Signal processing algorithms, arithmetic operations, Accuracy, Approximation algorithms, approximation theory, floating-point limit, interpolator algorithms, large lookup tables, LNS addition approximation, LNS subtraction approximation, nonlinear functions, Splines (mathematics)},
	pages = {174--179},
}

@inproceedings{kuo_lower_2012,
	title = {A lower error antilogarithmic converter using novel four-region piecewise-linear approximation},
	doi = {10.1109/APCCAS.2012.6419083},
	abstract = {In this paper, a novel antilogarithmic converter using four-region piecewise-linear approximation is proposed. The proposed technique provides a lower error and area-efficient hardware implementation for antilogarithmic converter with 0.5681\% of percent error range, which can outperform previously proposed methods with four-region and six-region schemes. The delay and area of the hardware implementation is 10ns and 6,639 ╬╝m2, respectively using 0.18 ╬╝m TSMC process.},
	booktitle = {2012 {IEEE} {Asia} {Pacific} {Conference} on {Circuits} and {Systems} ({APCCAS})},
	author = {Kuo, Chao-Tsung and Juang, Tso-Bing},
	month = dec,
	year = {2012},
	keywords = {Hardware, computer arithmetic, digital arithmetic, Digital signal processing, Very large scale integration, VLSI, Linear approximation, logarithm, digital signal processing chips, antilogarithm, Approximation error, four region piecewise linear approximation, lower error antilogarithmic converter, Mathematical model, piecewise linear techniques, size 0.18 mum, TSMC process, very large scale integration (VLSI) design},
	pages = {507--510},
}

@article{juang_lower_2009,
	title = {A {Lower} {Error} and {ROM}-{Free} {Logarithmic} {Converter} for {Digital} {Signal} {Processing} {Applications}},
	volume = {56},
	issn = {1549-7747},
	doi = {10.1109/TCSII.2009.2035270},
	abstract = {In this brief, we propose a lower error and ROM-free logarithmic converter. The proposed converter can lead to area-efficient hardware implementation as it avoids the need for a ROM by employing simple computation units for logarithmic approximation. Our proposed logarithmic conversion algorithm partitions the exact logarithmic curve into two symmetric regions such that the slopes in the two regions that are used for logarithmic approximation are inversed. Simulation results show that the proposed algorithm achieves an error range and percentage error range of only 0.045 and 3.339\%, respectively, which outperforms previously proposed one-region and two-region conversion methods. We have implemented the proposed logarithmic converter using 0.13-??m CMOS technology, and the latency is 2.8 ns. The proposed converter can be used to reduce the overhead of computation-intensive operations for real-time digital-signal-processing applications.},
	number = {12},
	journal = {IEEE Transactions on Circuits and Systems II: Express Briefs},
	author = {Juang, Tso-Bing and Chen, Sheng-Hung and Cheng, Huang-Jia},
	month = dec,
	year = {2009},
	keywords = {CMOS technology, logarithm, read-only storage, digital signal processing chips, very large scale integration (VLSI) design, CMOS digital integrated circuits, Digital signal processing (DSP), digital signal processing applications, ROM-free logarithmic converter, size 0.13 mum, time 2.8 ns},
	pages = {931--935},
}

@inproceedings{jullien_hybrid_1999,
	title = {A hybrid {DBNS} processor for {DSP} computation},
	volume = {1},
	doi = {10.1109/ISCAS.1999.777792},
	abstract = {This paper introduces a modification to an index calculus representation for the double-base number system (DBNS). The DBNS uses the bases 2 and 3; it is redundant (very sparse) and has a simple two-dimensional representation. An extremely sparse form of the DBNS uses a single non-zero digit to represent any real number with arbitrary precision. In this case the single digit can be identified by its coordinates (indices) in the two-dimensional representation space. The modification proposed in this paper, targeted to DSP inner product computations, uses a single digit representation for the coefficient vector and a 2-digit representation for the data vector. We show that a reduction of over 80\% in hardware cost is possible using this hybrid representation compared to the original single-digit technique},
	booktitle = {Proceedings of the 1999 {IEEE} {International} {Symposium} on {Circuits} and {Systems}, 1999. {ISCAS} '99},
	author = {Jullien, G.A. and Dimitrov, V.S. and Li, B. and Miller, W.C. and Lee, A. and Ahmadi, M.},
	month = jul,
	year = {1999},
	keywords = {Hardware, Table lookup, hybrid, Arithmetic, digital arithmetic, Digital signal processing, Very large scale integration, DBNS, DSP, digital signal processing chips, arbitrary precision, Calculus, Cellular neural networks, coefficient vector, Costs, double-base number system, DSP computation, Finite impulse response filter, hardware cost, hybrid DBNS processor, index calculus representation, inner product computations, Neural networks, redundancy, redundant system, two-dimensional representation space},
	pages = {5--8 vol.1},
}

@inproceedings{chen_hardware_2009,
	title = {A hardware algorithm for fast digit on-line logarithmic computation with exponential convergence rate},
	volume = {02},
	doi = {10.1109/ECTICON.2009.5137130},
	abstract = {In this research, a hardware algorithm for digit on-line logarithmic computation is proposed. This algorithm is based on a fast digit-parallel logarithmic algorithm that was proposed previously. The drawback of the previous algorithm is that the computation cannot be digit pipelined with other computations. Our new algorithm will generate the partial logarithmic result after only some input digits of the operand are available. Thus, the high throughput of the computing system can be attained with the use of digit pipelining in the design of the hardware architecture. Furthermore, the latency of the pipeline is short because the convergence rate of the algorithm is exponential. For example, when the word length of the operand is 24, the number of pipeline stages is only four. Base on our proposed digit on-line method, we have designed the architecture of a 24-bit logarithmic unit. The exhausted test of the 24-bit unit shows that our algorithm and error analysis are correct.},
	booktitle = {6th {International} {Conference} on {Electrical} {Engineering}/{Electronics}, {Computer}, {Telecommunications} and {Information} {Technology}, 2009. {ECTI}-{CON} 2009},
	author = {Chen, Rui-Lin and Chen, Chichyang},
	month = may,
	year = {2009},
	keywords = {Hardware, logarithmic number system, Computer architecture, Signal processing algorithms, hardware algorithm, Computer science, functions, Error analysis, parallel architectures, Testing, Throughput, convergence, Design methodology, digit on-line algorithm, digit pipeline architecture, digit pipelining, digit-parallel logarithmic algorithm, exponential convergence rate, fast digit on-line logarithmic computation, logarithmic computation, Multiplicative normalization, parallel algorithms, pipeline arithmetic, Pipeline processing},
	pages = {636--639},
}

@inproceedings{eskritt_2-digit_2000,
	title = {A 2-digit {DBNS} filter architecture},
	doi = {10.1109/SIPS.2000.886743},
	abstract = {We have previously reported on a novel number representation using 2 bases which we refer to as the double-base number system (DBNS). Our preferred implementation uses the relatively prime bases 2,3. If we allow the exponents of the bases to be arbitrarily large signed integers, then we can represent any real number to any arbitrary precision by a single digit DBNS representation. By representing the digit position by the exponent values, we generate a logarithmic-like representation which we can manipulate using an index calculus. A multiplier accumulator architecture for a FIR filter application has been reported which uses a half-index domain to remove the problem of addition within the index calculus. In this paper we show that using a 2-digit DBNS representation for both the input data and the filter coefficients can result in substantial hardware savings compared to both the single-digit a DBNS approach and an equivalent binary implementation of a general multiplier accumulator. In the paper we discuss the filter architecture, techniques for converting between binary and the 2-digit DBNS representations, and also the design technique used to generate the 2-digit DBNS FIR filter coefficients},
	booktitle = {2000 {IEEE} {Workshop} on {Signal} {Processing} {Systems}, 2000. {SiPS} 2000},
	author = {Eskritt, J. and Muscedere, R. and Jullien, G.A. and Dimitrov, V.S. and Miller, W.C.},
	year = {2000},
	keywords = {filter, DBNS},
	pages = {447--456},
}

@article{sicuranza_2-d_1981,
	title = {2-{D} digital filters using logarithmic number systems},
	volume = {17},
	issn = {00135194},
	url = {http://digital-library.theiet.org/content/journals/10.1049/el_19810594},
	doi = {10.1049/el:19810594},
	abstract = {The letter deals with the design of 2-D digital filters to be implemented in a logarithmic number system. The accuracy of the coefficient representation is considered, and a limit on the maximum useful word length is derived. An optimisation procedure is proposed, together with a few examples of 2-D filter design.},
	language = {en},
	number = {22},
	urldate = {2015-10-13},
	journal = {Electronics Letters},
	author = {Sicuranza, G.L.},
	year = {1981},
	pages = {854},
}

@inproceedings{mellott_asap-2d_1996,
	title = {{ASAP}-a {2D} {DFT} {VLSI} processor and architecture},
	volume = {6},
	isbn = {0-7803-3192-3},
	doi = {10.1109/ICASSP.1996.550577},
	abstract = {We examine the use of an innovation, called the logarithmic residue number system or LRNS, as an alternative to conventional DSP processors for implementing multiply-accumulate (MAC) operations. The Athena Sensor Arithmetic Processor (ASAP) is a custom VLSI multiprocessor chip based on the LRNS. The fabricated ASAP device is an LRNS ΓÇ£vector-processor on a chipΓÇ¥ capable of achieving MAC bandwidth-area ratios far greater than a conventional processor. The paper develops the scientific foundations upon which the LRNS is based, develops the ASAP architecture, and demonstrates its use in the design of a 231├ù231 two dimensional FFT having a one hundred frame per second bandwidth},
	language = {English},
	booktitle = {Proceedings of 1996 {IEEE} {International} {Conference} on {Acoustics}, {Speech}, and {Signal} {Processing} ({ICASSP}-96)},
	publisher = {IEEE},
	author = {Mellott, J. D and Lewis, M. and Taylor, F. and Coffield, P.},
	month = may,
	year = {1996},
	keywords = {multiprocessing systems, Digital signal processing chips, signal processing, discrete Fourier transforms, CMOS digital integrated circuits, ASAP, ASAP architecture, Athena Sensor Arithmetic Processor, bandwidth-area ratios, Cathode ray tubes, chip vector-processor, custom VLSI multiprocessor chip, DSP chip, DSP processors, logarithmic residue number system, logarithmic RNS, LRNS, MAC bandwidth-area ratios, multiply-accumulate operations, Power system reliability, Technological innovation, two dimensional FFT, vector processor systems, VLSI architecture},
	pages = {3280--3283 vol. 6},
}

@inproceedings{zhang_programmable_2004-1,
	title = {A programmable base {2D}-{LNS} {MAC} with self-generated look-up tables},
	volume = {2},
	isbn = {0-7803-8251-X},
	doi = {10.1109/ISCAS.2004.1329390},
	abstract = {This paper presents a new architecture for a programmable second base 2-dimensional logarithmic number system (2D LNS) Multiply Accumulator Cell (MAC) using DRAMs to store the conversion look-up tables (LUTs). It uses a direct mapping from non-binary exponents to binary format with a 50\% reduction in DRAM size compared to a recently reported architecture. With a simple modification of the DRAM data loading structure, each MAC can build its own LUT specific to the non-binary exponents of 2D-LNS coefficients in a pipelined data flow. This results not only in a considerable reduction of DRAM size, but also in the elimination of adders normally required for computing non-binary exponents in a data filtering channel.},
	language = {English},
	booktitle = {Proceedings of the 2004 {International} {Symposium} on {Circuits} and {Systems} ({ISCAS} '04)},
	publisher = {IEEE},
	author = {Zhang, W. and Jullien, G. A and Dimitrov, V. S},
	month = may,
	year = {2004},
	keywords = {digital signal processing, direct mapping, DRAM chips, Multidimensional systems, multiply accumulator cell, adder, data filtering channel, data loading structure, DRAM, dynamic random access memory, memory architecture, nonbinary exponents, pipelined data flow, programmable logarithmic number system, second base logarithmic number system, self generated look up tables, two dimensional logarithmic number system, two-dimensional digital filters},
	pages = {II-- 789--92 Vol.2},
}

@inproceedings{lewis_accurate_1993,
	title = {An accurate {LNS} arithmetic unit using interleaved memory function interpolator},
	isbn = {0-8186-3862-1},
	doi = {10.1109/ARITH.1993.378115},
	abstract = {A logarithmic number system (LNS) arithmetic unit using a new method for polynomial interpolation in hardware is described. The use of an interleaved memory reduces storage requirements by allowing each stored function value to be used in interpolation across several segments. This strategy always uses fewer words of memory than an optimized polynomial with stored polynomial coefficients. Many accuracy requirements for the LNS arithmetic unit are possible, but a round to nearest cannot be easily achieved. The goal suggested here is to ensure that the worst case LNS relative error is smaller than the worst case FP relative error. Using the interleaved memory interpolator, the detailed design of an LNS arithmetic unit is performed using a second-order polynomial interpolator including approximately 91K bits of ROM},
	language = {English},
	booktitle = {Proceedings of the 11th {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE},
	author = {Lewis, D. M},
	month = jul,
	year = {1993},
	keywords = {ALU, LNS, polynomial interpolation, Terminology, interleaved storage, Data analysis, interleaved memory, interleaved memory function, interleaved memory interpolator, LNS arithmetic unit},
	pages = {2--9},
}

@article{abed_vlsi_2003,
	title = {{VLSI} implementation of a low-power antilogarithmic converter},
	volume = {52},
	issn = {0018-9340},
	doi = {10.1109/TC.2003.1228517},
	abstract = {This paper presents a VLSI implementation of a unique 32-bit antilogarithmic converter, which generates data for some digital-signal-processing (DSP) applications. Novel antilogarithm correcting algorithms are developed and implemented with low-power and hardware-efficient correcting circuits. The VLSI implementations of these algorithms are much smaller than other hardware intensive algorithms found in the literature. The converter is implemented using 0.6 ╬╝m CMOS technology, and its combinational logic implementation requires 1500╬╗├ù2800╬╗ of chip area. The 32-bit antilogarithmic converter computes the antilogarithm in a single clock cycle and runs at 100 MHz and consumes 81 mW.},
	number = {9},
	journal = {IEEE Transactions on Computers},
	author = {Abed, K.H. and Siferd, R.E.},
	month = sep,
	year = {2003},
	keywords = {Table lookup, Linear approximation, Digital signal processing chips, digital signal processing, Circuits, DSP, combinational circuits, combinational logic, 0.6 micron, 100 MHz, 81 mW, antilogarithm correcting algorithms, hardware-efficient correcting circuits, low-power antilogarithmic converter},
	pages = {1221--1228},
}

@inproceedings{brokalakis_using_2011,
	title = {Using the arithmetic representation properties of data to reduce the area and power consumption of {FFT} circuits for wireless {OFDM} systems},
	isbn = {978-1-4577-1921-9 978-1-4577-1920-2 978-1-4577-1919-6},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6088941},
	doi = {10.1109/SiPS.2011.6088941},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Brokalakis, Andreas and Paliouras, Vassilis},
	month = oct,
	year = {2011},
	keywords = {LNS, computer architecture, Energy consumption, Approximation methods, fast Fourier transforms, FFT, 64-point FFT implementation, arithmetic representation, arithmetic representation properties, BER, Bit error rate, complement fixed-point representation, energy consumption, FFT circuits, mixed linear-logarithmic arithmetic data representation, modem, modems, OFDM, OFDM modulation, Pipelines, radiocommunication, Receivers, wireless OFDM systems},
	pages = {7--12},
}

@inproceedings{sinha_triple_2008,
	title = {Triple based number systems - a novel concept for performance enhancement of digital signal processors},
	isbn = {978-1-4244-2408-5},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4766706},
	doi = {10.1109/TENCON.2008.4766706},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Sinha, Amitabha and Maitra, Subhashis and Sinha, Pavel and Newton, Ken and Mukherjee, Kishanu},
	month = nov,
	year = {2008},
	keywords = {DSP, multi-base},
	pages = {1--5},
}

@inproceedings{arnold_towards_2011,
	title = {Towards a {Quaternion} {Complex} {Logarithmic} {Number} {System}},
	isbn = {978-1-4244-9457-6},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5992106},
	doi = {10.1109/ARITH.2011.14},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Arnold, Mark G. and Cowles, John and Paliouras, Vassilis and Kouretas, Ioannis},
	month = jul,
	year = {2011},
	keywords = {LNS, complex},
	pages = {33--42},
}

@inproceedings{dimitrov_use_2001,
	address = {Washington, DC, USA},
	title = {The {Use} of the {Multi}-{Dimensional} {Logarithmic} {Number} {System} in {DSP} {Applications}},
	url = {http://dl.acm.org/citation.cfm?id=872021.872440},
	abstract = {Abstract: A recently introduced double-base number representation has proved to be successful in improving the performance of several algorithms in cryptography and digital signal processing. The index-calculus version of this number system can be regarded as a two-dimensional extension of the classical logarithmic number system. This paper builds on previous special results by generalizing the number system both in multiple dimensions (multiple bases) and by the use of multiple digits. Adopting both generalizations we show that large reductions in hardware complexity are achievable compared to an equivalent precision logarithmic number system.},
	urldate = {2015-07-05},
	booktitle = {Proceedings of the 15th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society},
	author = {Dimitrov, V. S. and Eskritt, J. and Imbert, L. and Jullien, G. A. and Miller, W. C.},
	year = {2001},
	keywords = {LNS, Digital arithmetic, Digital signal processing chips, digital signal processing, DSP, MDLNS, cryptography, double-base number representation, DSP applications, hardware complexity, index-calculus, Microwave integrated circuits, multidimensional logarithmic number system, multiple digits},
	pages = {247--},
}

@inproceedings{ruan_realization_2010,
	title = {The {Realization} of the {1GHz} {Negative} {Logarithmic} {Function} {Based} on the 0.35um {AMS} {Technology}},
	isbn = {978-1-61284-428-2},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5945041},
	doi = {10.1109/ISISE.2010.111},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Ruan, Weihua},
	month = dec,
	year = {2010},
	keywords = {functions},
	pages = {15--18},
}

@article{coleman_european_2008,
	title = {The {European} {Logarithmic} {Microprocesor}},
	volume = {57},
	issn = {0018-9340},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4358243},
	doi = {10.1109/TC.2007.70791},
	number = {4},
	urldate = {2015-08-10},
	journal = {IEEE Transactions on Computers},
	author = {Coleman, John N. and Softley, Christopher I. and Kadlec, Jiri and Matousek, Rudolf and Tichy, Milan and Pohl, Z. and Hermanek, Antonin and Benschop, Nico F.},
	year = {2008},
	keywords = {ALU, LNS, 32b},
	pages = {532--546},
}

@inproceedings{arnold_denormal_2013,
	title = {The {Denormal} {Logarithmic} {Number} {System}},
	doi = {10.1109/ASAP.2013.6567564},
	abstract = {Economical hardware often uses a FiXed-point Number System (FXNS), whose constant absolute precision is acceptable for many signal-processing algorithms. The almost-constant relative precision of the more expensive Floating-Point (FP) number system simplifies design, for example, by eliminating worries about FXNS overflow because the range of FP is much larger than FXNS for the same wordsize; however, primitive FP introduces another problem: underflow. The conventional Signed Logarithmic Number System (SLNS) offers similar range and precision as FP with much better performance (in terms of power, speed and area) for multiplication, division, powers and roots. Moderate-precision addition in SLNS uses table lookup with properties similar to FP (including underflow). This paper proposes a new number system, called the Denormal LNS (DLNS), which is a hybrid of the properties of FXNS and SLNS. The inspiration for DLNS comes from the denormal numbers found in IEEE-754 (that provide better, gradual underflow) and the ╬╝-law often used for speech encoding; the novel DLNS circuit here allows arithmetic to be performed directly on such encoded data. The proposed approach allows customizing the range in which gradual underflow occurs. A wide gradual underflow range acts like FXNS; a narrow one acts like SLNS. Simulation of an FFT application illustrates a moderate gradual underflow decreasing bit-switching activity 15\% compared to underflow-free SLNS, at the cost of increasing application error by 30\%. DLNS reduces switching activity 5\% to 20\% more than an abruptly-underflowing SLNS with one-half the error. Synthesis shows the novel circuit primarily consists of traditional SLNS addition and subtraction tables, with additional datapaths that allow the novel ALU to act on conventional SLNS as well as DLNS and mixed data, for a worst-case area overhead of 26\%.},
	booktitle = {2013 {IEEE} 24th {International} {Conference} on {Application}-{Specific} {Systems}, {Architectures} and {Processors} ({ASAP})},
	author = {Arnold, M.G. and Collange, S.},
	month = jun,
	year = {2013},
	keywords = {Standards, Table lookup, logic design, LNS, Computer arithmetic, fast Fourier transform, fast Fourier transforms, standards, multiplexing, almost-constant relative precision, Blogs, denormal, Denormal, denormal LNS, denormal logarithmic number system, DLNS circuit, economical hardware, FFT application, floating-point number system, FXNS overflow, IEEE-754, increase application error, Integrated circuit modeling, Logarithmic Number Systems (LNS), signal-processing algorithms, signed logarithmic number system, SLNS, switching activity reduction, Underflow, Xenon},
	pages = {117--124},
}

@inproceedings{huang_chip_1994,
	title = {The chip design of a 32-b logarithmic number system},
	volume = {4},
	doi = {10.1109/ISCAS.1994.409224},
	abstract = {To design a 32-bit logarithmic number system (LNS) processor, this paper presents two novel techniques: Digit-Partition (DP) to design log 2(1.x) function and Iterative Difference by Linear Approximation (IDLA) to design 20.x function. The experimental result reveals that the proposed design is more attractive than the previous researches in the LNS processor},
	booktitle = {, 1994 {IEEE} {International} {Symposium} on {Circuits} and {Systems}, 1994. {ISCAS} '94},
	author = {Huang, Sheng-Chieh and Chen, Liang-Gee and Chen, Thou-Ho},
	month = may,
	year = {1994},
	keywords = {LNS arithmetic, LNS, microprocessor chips, Digital arithmetic, Linear approximation, Councils, Programmable logic arrays, 32b, iterative methods, Partitioning algorithms, Chip scale packaging, Degradation, digit-partition, IDLA, integrated circuit design, iterative difference by linear approximation},
	pages = {167--170 vol.4},
}

@article{cheng_switched-capacitor_1991,
	title = {Switched-capacitor pipelined logarithmic {A}/{D} and {D}/{A} convertors},
	volume = {138},
	issn = {0956-3768},
	abstract = {The authors present two switched-capacitor circuits with modest complexity to implement a pipelined logarithmic digital-analogue convertor (LDAC) and logarithmic analogue-digital convertor (LADC), respectively, which spend only one clock time per conversion. In addition, the effect of the capacitor-ratio mismatch on the conversion errors of the convertor circuits is discussed. Hence, from the available maximum capacitor-ratio value and mismatch of the present integrated circuit (IC) technology, the feasible bit length of the pipelined LDAC and LADC can be computed},
	number = {6},
	journal = {Circuits, Devices and Systems, IEE Proceedings G},
	author = {Cheng, M.-H. and Huang, T.-C.},
	month = dec,
	year = {1991},
	keywords = {pipeline processing, ADC, analogue-digital conversion, analogue-digital convertor, capacitor-ratio mismatch, coding errors, conversion errors, D/A convertors, DAC, digital-analogue conversion, digital-analogue convertor, SC pipelined logarithmic type, switched capacitor networks, switched-capacitor circuits},
	pages = {714--716},
}

@inproceedings{chen_software_2009,
	title = {Software implementation of {LNS} arithmetic in an {ARM} embedded system},
	doi = {10.1109/ISCE.2009.5157011},
	abstract = {Logarithmic number system (LNS) arithmetic is a good alternative for floating-point arithmetic. We have implemented 32-bit LNS arithmetic by using assembly and C languages on an ARM processor. Compared to FLP arithmetic, the proposed software-implemented LNS arithmetic can achieve a speedup factor of 9.12/13.45 in multiplication/division, with only about 34\% speed degrade in addition/subtraction. For the AB function, the proposed LNS arithmetic is 91.06 times faster than the FLP arithmetic. We conclude that our proposed software LNS arithmetic implementation approach is very efficient for computing complex arithmetic functions in an ARM embedded system.},
	booktitle = {{IEEE} 13th {International} {Symposium} on {Consumer} {Electronics}, 2009. {ISCE} '09},
	author = {Chen, Chichyang and Liu, Li-Wei and Jou, Jun-Wen},
	month = may,
	year = {2009},
	keywords = {LNS, microprocessor chips, Digital arithmetic, Embedded computing, embedded system, Embedded system, logarithmic number system arithmetic, Computer science, 32-bit LNS arithmetic, arithmetic functions, ARM embedded processors and systems, ARM embedded system, ARM processor, Assembly, assembly language, C language, Consumer electronics, Embedded software, FLP arithmetic, software, software implementation, software-implemented LNS arithmetic},
	pages = {1012--1014},
}

@article{coleman_simplification_1995,
	title = {Simplification of table structure in logarithmic arithmetic},
	volume = {31},
	issn = {0013-5194},
	doi = {10.1049/el:19951304},
	abstract = {Logarithmic addition and subtraction, particularly the latter, require a large and complex lookup table. The algorithm presented substantially reduces the size and complexity of the arithmetic, with little additional overhead in time or hardware},
	number = {22},
	journal = {Electronics Letters},
	author = {Coleman, J.N.},
	month = oct,
	year = {1995},
	keywords = {Table lookup, LNS, Digital arithmetic, addition, subtraction, algorithm, lookup table, theory},
	pages = {1905--1906},
}

@article{swartzlander_sign/logarithm_1983,
	title = {Sign/{Logarithm} {Arithmetic} for {FFT} {Implementation}},
	volume = {C-32},
	issn = {0018-9340},
	doi = {10.1109/TC.1983.1676274},
	abstract = {Sign/logarithm arithmetic is applicable to a variety of numerical applications where wide dynamic range and small wordsize are required. In this paper the basic sign/logarithm arithmetic operations required for signal processing (i.e., addition, subtraction, and multiplication) are reviewed, the computational errors are analyzed for FFT realization, and simulation results are presented which serve to verify the analysis. It is shown that the sign/logarithm approach provides improved arithmetic quantization error performance for a given word size over FFT's implemented with conventional fixed or floating point arithmetic, and that the sign/logarithm implementation is faster and less complex than conventional approaches.},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Swartzlander, E.E. and Chandra, D.V.S. and Nagle, H.Troy and Starks, S.A.},
	month = jun,
	year = {1983},
	keywords = {Filters, Digital arithmetic, number systems, signal processing, Computational modeling, Signal analysis, Computer arithmetic, fast Fourier transform, fast Fourier transforms, Analytical models, special purpose computers, spectral computation},
	pages = {526--534},
}

@inproceedings{ismail_rom-less_2011,
	title = {{ROM}-less {LNS}},
	doi = {10.1109/ARITH.2011.15},
	abstract = {The logarithmic number system has been proposed as an alternative to floating-point arithmetic. Multiplication, division and square-root operations are accomplished with fixed-point methods, but addition and subtraction are considerably more challenging. Recent work has demonstrated that these operations too can be done with similar speed and accuracy to their FP equivalents, but the necessary circuitry is complex. In particular, it is dominated by the need for large ROM tables for the storage of non-linear functions. This paper describes two algorithms, a new co-transformation procedure and an improvement to an existing interpolation method, that reduce these tables to an extent that allows their easy synthesis in logic. An implementation shows substantial reductions in area and delay from the previous best 32-bit realisation, with equivalent accuracy.},
	booktitle = {2011 20th {IEEE} {Symposium} on {Computer} {Arithmetic} ({ARITH})},
	author = {Ismail, R.C. and Coleman, J.N.},
	month = jul,
	year = {2011},
	keywords = {Indexes, read-only storage, Accuracy, floating-point arithmetic, SILICON, logic, 32-bit realisation, co-transformation procedure, fixed- point methods, interpolation method, multiplication-division-square root operations, ROM tables, ROM-less LNS},
	pages = {43--51},
}

@article{arnold_redundant_1990,
	title = {Redundant logarithmic arithmetic},
	volume = {39},
	issn = {0018-9340},
	doi = {10.1109/12.57046},
	abstract = {A number system that offers advantages in some situations over conventional floating point and sign/logarithmic number systems is described. Redundant logarithmic arithmetic, like conventional logarithmic arithmetic, relies on table lookups to make the arithmetic unit simpler than an equivalent floating point unit. The cost of 32 bit subtraction in a redundant logarithmic number system is lower than previously published logarithmic subtraction methods. The total memory requirement for a 29-bit redundant logarithmic unit is 16 K words compared to 22 K words by the best previously published conventional sign logarithm unit, assuming similar addition techniques are employed. A redundant logarithmic number system can be implemented with online arithmetic, which would be impractical for a conventional sign logarithm number system. The disadvantages of redundant arithmetic are typical of redundant number systems. First, the redundancy doubles the storage requirements for data values. Second, the representation can become ill-conditioned, especially as a result of iterated multiplications. Third, division and square root operations are more difficult to implement in redundant logarithmic arithmetic},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Arnold, M.G. and Bailey, T.A. and Cowles, J.R. and Cupal, J.J.},
	month = aug,
	year = {1990},
	keywords = {Table lookup, Digital arithmetic, interpolation, Computer errors, Circuits, division, Computer science, number theory, redundancy, 29-bit redundant logarithmic unit, 32 bit subtraction, arithmetic unit, data values, ill-conditioned, iterated multiplications, memory requirement, online arithmetic, redundant logarithmic arithmetic, redundant logarithmic number system, square root, storage requirements, table lookups},
	pages = {1077--1086},
}

@inproceedings{osman_random_2009,
	title = {Random forest-{LNS} architecture and vision},
	isbn = {978-1-4244-3759-7},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5195824},
	doi = {10.1109/INDIN.2009.5195824},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Osman, Hassab Elgawi},
	month = jun,
	year = {2009},
	pages = {319--324},
}

@article{lo_programmable_1984,
	title = {Programmable variable-rate up/down counter for generating binary logarithms},
	volume = {131},
	issn = {0143-7062},
	doi = {10.1049/ip-e.1984.0023},
	abstract = {The design of an algorithm for a programmable variable-rate counter for generating precise binary logarithmic functions is presented. The error in log2(l + x), as defined by Iog2(l + x) ┬┐┬┐ x, may be considered as a set of straight lines whose slopes, either positive or negative, are chosen to be integral multiples of a binary fraction. By using a programmable counter whose rate is proportional to the slope of the line segments, the error is corrected. The circuitry is simple because no add operation is needed. The precision of the answer depends upon the number of bits used. In addition, an algorithm to synthesise the variable-rate up/down counter (VRU/DC), thus reducing the number of calculations, is given. It pinpoints the break points for this design, and also specifies the range covered by the segment for optimal precision. The algorithm can also be used to generate the antilogarithm.},
	number = {4},
	journal = {Computers and Digital Techniques, IEE Proceedings E},
	author = {Lo, H.Y. and Lu, J.H. and Aoki, Y.},
	month = jul,
	year = {1984},
	keywords = {Digital arithmetic, error correction, Counting circuits, antilogarithm generation, binary logarithms generation, optimal precision, programmable variable-rate up/down counter},
	pages = {125--131},
}

@inproceedings{mousavi_pipelined_2010,
	title = {Pipelined {Residue} {Logarithmic} {Numbers} {System} for general modules set \{\vphantom{\}}2},
	isbn = {978-1-4244-8567-3},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5711144},
	doi = {10.1109/ICCIT.2010.5711144},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Mousavi, Alireza and Taleshmekaeil, Davar Kheirandish},
	month = nov,
	year = {2010},
	pages = {699--703},
}

@article{lamaire_performance_1986,
	title = {Performance of digital linear regulators which use logarithmic arithmetic},
	volume = {31},
	issn = {0018-9286},
	doi = {10.1109/TAC.1986.1104309},
	abstract = {This paper analyzes the performance of digital linear regulators which use finite-precision logarithmic arithmetic. A linear equation is derived which describes the steady-state covariance matrix of such a closed-loop regulator system. The utility of this covariance matrix in designing regulators which use logarithmic arithmetic is illustrated through several numerical examples and the presentation of a regulator design methodology.},
	number = {5},
	journal = {IEEE Transactions on Automatic Control},
	author = {LaMaire, Richard O. and Lang, J.H.},
	month = may,
	year = {1986},
	keywords = {Digital arithmetic, Fixed-point arithmetic, Control systems, Equations, Digital control, Covariance matrices, Finite-wordlength effects, Regulators, Regulators, linear systems, Steady-state},
	pages = {394--400},
}

@article{arnold_options_2014,
	title = {Options for {Denormal} {Representation} in {Logarithmic} {Arithmetic}},
	volume = {77},
	issn = {1939-8018, 1939-8115},
	url = {http://link.springer.com/article/10.1007/s11265-014-0874-3},
	doi = {10.1007/s11265-014-0874-3},
	abstract = {Economical hardware often uses a FiXed-point Number System (FXNS), whose constant absolute precision is acceptable for many signal-processing algorithms. The almost-constant relative precision of the more expensive Floating-Point (FP) number system simplifies design, for example, by eliminating worries about FXNS overflow because the range of FP is much larger than FXNS for the same wordsize; however, primitive FP introduces another problem: underflow. The Signed Logarithmic Number System (SLNS) offers similar range and precision as FP with much better performance (in terms of power, speed and area) for multiplication, division, powers and roots. This paper proposes three variations of a new number system, respectively called the Denormal LNS (DLNS), Denormal Mitchell LNS (DMLNS) and Denormal Offset Mitchell LNS (DOMLNS), which are all hybrids of the properties of FXNS and SLNS. The inspiration for D(OM)LNS comes from the denormal (aka subnormal) numbers found in IEEE-754 (that provide better, gradual underflow) and the ╬╝-law often used for speech encoding; the novel DLNS circuit here allows arithmetic to be performed directly on such encoded data. The proposed approach allows customizing the range in which gradual underflow occurs. Our first DLNS implementation leverages existing SLNS basic blocks. Synthesis shows the novel circuit primarily consists of traditional SLNS addition and subtraction tables, with additional datapaths that allow the novel arithmetic unit to act on conventional SLNS as well as DLNS and mixed data, for a worst-case area overhead of 26 \%. Unlike SLNS, this DLNS implementation is still costly for general (non-constant) multiplication, division and roots. To overcome this difficulty, this paper proposes the other variations called Denormal Mitchell LNS (DMLNS) and Denormal Offset Mitchell LNS (DOMLNS), in which the well-known MitchellΓÇÖs method makes the cost of general multiplication, division and roots closer to that of SLNS. Taylor-series computations suggest subnormal values in DMLNS and DOMLNS also behave similarly to those in the IEEE-754 FP standard. Synthesis shows that DMLNS and DOMLNS respectively have average area overheads of 25 \% and 17 \% compared to an equivalent SLNS 5-operation unit.},
	language = {en},
	number = {1-2},
	urldate = {2015-07-05},
	journal = {Journal of Signal Processing Systems},
	author = {Arnold, Mark G. and Collange, Sylvain},
	month = mar,
	year = {2014},
	keywords = {Computer arithmetic, Denormal, Logarithmic Number Systems (LNS), Underflow, Subnormal},
	pages = {207--220},
}

@inproceedings{fu_optimizing_2007,
	title = {Optimizing {Logarithmic} {Arithmetic} on {FPGAs}},
	isbn = {978-0-7695-2940-0},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4297253},
	doi = {10.1109/FCCM.2007.26},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Fu, Haohuan and Mencer, Oskar and Luk, Wayne},
	month = apr,
	year = {2007},
	pages = {163--172},
}

@inproceedings{harish_anand_optimized_2013,
	title = {Optimized architecture for {Floating} {Point} computation {Unit}},
	isbn = {978-1-4673-5301-4 978-1-4673-5300-7 978-1-4673-5299-4},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6496587},
	doi = {10.1109/ICEVENT.2013.6496587},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Harish Anand, T. and Vaithiyanathan, D. and Seshasayanan, R.},
	month = jan,
	year = {2013},
	pages = {1--5},
}

@inproceedings{belanger_design_2006,
	title = {On the {Design} of a {Double} {Precision} {Logarithmic} {Number} {System} {Arithmetic} {Unit}},
	isbn = {1-4244-0416-9},
	doi = {10.1109/NEWCAS.2006.250901},
	abstract = {This paper investigates the integration of a 64-bit LNS arithmetic unit into a conventional microprocessor. The goals are to devise an LNS unit that can be faster than an FPU for a broad range of applications, and to minimize the added hardware. Two ways of implementing the logarithmic sum and difference functions are studied. One way uses higher-order Taylor series implemented by look-up tables and interpolation, while the other is based on a CORDIC engine. It is shown that a look-up table based implementation is fairly competitive to a floating-point unit in terms of clock rate, overall latency and repeat rate, at the expense of some cache pressure, while the CORDIC-based implementation is fast, has a repeat rate of one clock cycle, and supports complex operations but at the cost of a higher gate count},
	language = {English},
	booktitle = {2006 {IEEE} {North}-{East} {Workshop} on {Circuits} and {Systems}},
	publisher = {IEEE},
	author = {Belanger, N. and Savaria, Y.},
	month = jun,
	year = {2006},
	keywords = {Table lookup, floating-point unit, Delay, Digital arithmetic, interpolation, microprocessor, look-up tables, Clocks, Taylor series, CORDIC engine, Engines, higher-order Taylor series, logarithmic number system arithmetic unit, logarithmic sum and difference functions},
	pages = {241--244},
}

@inproceedings{arnold_cost_1997,
	title = {On the cost effectiveness of logarithmic arithmetic for backpropagation training on {SIMD} processors},
	volume = {2},
	doi = {10.1109/ICNN.1997.616150},
	abstract = {We show that backpropagation on a SIMD processor with logarithmic arithmetic uses less memory and may be up to 3.2 times more cost effective than on one with fixed point arithmetic when synthesized in the same technology},
	booktitle = {, {International} {Conference} on {Neural} {Networks},1997},
	author = {Arnold, M.G. and Bailey, T.A. and Cupal, J.J. and Winkel, M.D.},
	month = jun,
	year = {1997},
	keywords = {Digital arithmetic, COST EFFECTIVENESS, Computer science, Neural networks, backpropagation, backpropagation training, cost effectiveness, Data engineering, Feedforward systems, Feeds, Neurons, SIMD processors, Supervised learning},
	pages = {933--936 vol.2},
}

@article{sicuranza_efficient_1983,
	title = {On efficient implementations of 2-{D} digital filters using logarithmic number systems},
	volume = {31},
	issn = {0096-3518},
	doi = {10.1109/TASSP.1983.1164149},
	abstract = {The implementation of 2-D digital filters using logarithmic number systems (LNS's) is discussed in detail. The properties of such systems are derived with reference to an iterative rounding scheme, which allows increasing the accuracy of the filter coefficient representation by using more than one power of the base a. The optimization of the base is proposed as an efficient tool for the design of accurate 2-D filters. Different design strategies are considered, together with a discussion of the degree of precision required for the circuits which determine the base of the LNS. The efficiency and versatility of this approach are demonstrated with several design examples in 2-D.},
	number = {4},
	journal = {IEEE Transactions on Acoustics, Speech and Signal Processing},
	author = {Sicuranza, G.L.},
	month = aug,
	year = {1983},
	keywords = {LNS, error analysis, core, signal processing, filter, digital signal processing, Circuits, Fixed-point arithmetic, Design optimization},
	pages = {877--885},
}

@article{constantinides_numerical_2011,
	title = {Numerical {Data} {Representations} for {FPGA}-{Based} {Scientific} {Computing}},
	volume = {28},
	issn = {0740-7475},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5765909},
	doi = {10.1109/MDT.2011.48},
	number = {4},
	urldate = {2015-07-05},
	journal = {IEEE Design \& Test of Computers},
	author = {Constantinides, George and Kinsman, Adam and Nicolici, Nicola},
	month = jul,
	year = {2011},
	pages = {8--17},
}

@inproceedings{dimitrov_near_1996,
	title = {Near canonic double-based number system ({DBNS}) with applications in digital signal processing},
	url = {http://proceedings.spiedigitallibrary.org/proceeding.aspx?articleid=1022333},
	doi = {10.1117/12.255433},
	urldate = {2015-07-05},
	author = {Dimitrov, Vassil S. and Sadeghi-Emamchaie, Saeid and Jullien, Graham A. and Miller, W. C.},
	editor = {Luk, Franklin T.},
	month = oct,
	year = {1996},
	pages = {14--25},
}

@article{brubaker_multiplication_1975,
	title = {Multiplication {Using} {Logarithms} {Implemented} with {Read}-{Only} {Memory}},
	volume = {C-24},
	issn = {0018-9340},
	doi = {10.1109/T-C.1975.224307},
	abstract = {A method for designing the read-only memories (ROM's) needed for multiplication using logarithms is developed. By defining the word length of the multiplicand, multiplier, and product as n bits and the word length of -the rounded logarithms as m bits, design curves are given that allow various values of n and m to be selected for a given multiplier accuracy. Then a table is used to determine, which combination results in an implementation with the least number of bits.},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Brubaker, T.A. and Becker, J.C.},
	month = aug,
	year = {1975},
	keywords = {Computer aided instruction, Algorithms, Laboratories, Antilogarithms, logarithms, multiplication, read-only memory.},
	pages = {761--765},
}

@article{j.m._muller_semi-logarithmic_1998,
	title = {Semi-{Logarithmic} {Number} {Systems}},
	volume = {47},
	number = {2},
	journal = {IEEE Transactions on Computers},
	author = {{J.M. Muller} and {A. Scherbyna} and {A. Tisserand}},
	month = feb,
	year = {1998},
}

@inproceedings{a._mignotte_model_1996,
	address = {Lille, France},
	title = {A {Model} for {Using} {Redundant} {Number} {Systems} in {Special}-{Purpose} {Architectures}},
	booktitle = {Proceedings of {CESA}'96 ({IMACS} {Multiconference} {Computational} {Engineering} in {Systems} {Applications})},
	author = {{A. Mignotte} and {J. M. Muller} and {O. Peyran}},
	month = jul,
	year = {1996},
}

@article{metafas_floating-point_1995,
	title = {A {Floating}-{Point} {Advanced} {CORDIC} {Processor}},
	volume = {10},
	journal = {Journal of VLSI Signal Processing},
	author = {Metafas, D. E. and Goutis, C. E.},
	year = {1995},
	pages = {53--65},
}

@inproceedings{lewis_accurate_1993-1,
	address = {Windsor, Canada},
	title = {An accurate {LNS} arithmetic using interleaved memory function interpolator},
	booktitle = {Proceedings of the 11th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Lewis, D. M.},
	editor = {Swartzlander, E. E. and {M. J. Irwin} and {J. Jullien}},
	month = jun,
	year = {1993},
	keywords = {logarithmic number system, number systems},
	pages = {2--9},
}

@inproceedings{majithia_note_1973,
	title = {A note on base-2 logarithm computations},
	author = {Majithia, J. C. and Levan, D.},
	year = {1973},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {elementary functions, logarithm},
}

@article{lefevre_--fly_2003,
	title = {On-the-{Fly} {Range} {Reduction}},
	volume = {33},
	number = {1/2},
	journal = {Journal of VLSI Signal Processing},
	author = {Lef├¿vre, V. and {J.-M. Muller}},
	month = feb,
	year = {2003},
	pages = {31--35},
}

@inproceedings{knofel_fast_1991,
	address = {Grenoble, France},
	title = {Fast hardware units for the computation of accurate dot products},
	booktitle = {Proceedings of the 10th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Knofel, A.},
	editor = {Kornerup, P. and Matula, D. W.},
	month = jun,
	year = {1991},
	keywords = {accuracy control, floating-point arithmetic, interval arithmetic},
	pages = {70--74},
}

@inproceedings{kantabutra_designing_1991,
	address = {Grenoble, France},
	title = {Designing optimum carry-skip adders},
	booktitle = {Proceedings of the 10th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Kantabutra, V.},
	editor = {Kornerup, P. and Matula, D. W.},
	month = jun,
	year = {1991},
	keywords = {addition},
	pages = {146--155},
}

@article{kuck_analysis_1977,
	title = {Analysis of rounding methods in floating point arithmetic},
	volume = {C-26},
	journal = {IEEE Transactions on Computers},
	author = {Kuck, D. J. and Parker, D. S. and Sameh, A. H.},
	year = {1977},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {floating-point arithmetic, rounding},
	pages = {643--650},
}

@book{knuth_art_1973,
	title = {The {Art} of {Computer} {Programming}},
	volume = {2},
	publisher = {Addison Wesley, Reading, MA},
	author = {Knuth, D.},
	year = {1973},
}

@inproceedings{knowles_family_1999,
	address = {Los Alamitos, CA},
	title = {A {Family} of {Adders}},
	booktitle = {Proceedings of the 14th {IEEE} {Symposium} on {Computer} {Arithmetic} ({Adelaide}, {Australia})},
	publisher = {IEEE Computer Society Press},
	author = {Knowles, Simon},
	editor = {{Koren} and {Kornerup}},
	month = apr,
	year = {1999},
	pages = {30--34},
}

@inproceedings{johnsen_ieee_1983,
	address = {Aarhus, Denmark},
	title = {An {IEEE} {Floating} {Point} {Arithmetic} {Implementation}},
	booktitle = {Proceedings of the 6th {Symposium} on {Computer} {Architecture}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Johnsen, K.},
	year = {1983},
	keywords = {floating-point arithmetic},
}

@article{american_national_standards_institute_and_institute_of_electrical_and_electronic_engineers_ieee_1985,
	title = {{IEEE} {Standard} for {Binary} {Floating}-{Point} {Arithmetic}},
	journal = {ANSI/IEEE Standard, Std 754-1985, {\textbackslash}rm New York},
	author = {{American National Standards Institute and Institute of Electrical and Electronic Engineers}},
	year = {1985},
}

@article{haviland_cordic_1980,
	title = {A {CORDIC} arithmetic processor chip},
	volume = {C-29},
	number = {2},
	journal = {IEEE Transactions on Computers},
	author = {Haviland, G. H. and Tuszinsky, A. A.},
	month = feb,
	year = {1980},
	keywords = {cordic, elementary functions, shift-and-add algorithms, trigonometric functions},
}

@book{n._higham_accuracy_2002,
	title = {Accuracy and {Stability} of {Numerical} {Algorithms}, {Second} {Edition}},
	isbn = {0-89871-521-0},
	publisher = {SIAM},
	author = {{N. Higham}},
	year = {2002},
}

@article{henkel_improved_1989,
	title = {Improved addition for the logarithmic number systems},
	volume = {37},
	journal = {IEEE Transactions on Acoustics, Speech, and Signal Processing},
	author = {Henkel, H.},
	year = {1989},
	keywords = {addition, logarithmic number system, number systems},
	pages = {301--303},
}

@article{hough_applications_1981,
	title = {Applications of the proposed {IEEE}-754 standard for floating-point arithmetic},
	journal = {Computer},
	author = {Hough, D.},
	month = mar,
	year = {1981},
	keywords = {floating-point arithmetic},
}

@article{hamming_error_1950,
	title = {Error detecting and error correcting codes},
	volume = {29},
	number = {2},
	journal = {The Bell System Technical Journal},
	author = {Hamming, R. W.},
	month = apr,
	year = {1950},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {error-tolerant arithmetic},
	pages = {147--160},
}

@article{hamming_distribution_1970,
	title = {On the distribution of numbers},
	volume = {49},
	journal = {Bell Systems Technical Journal},
	author = {Hamming, R. W.},
	year = {1970},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {accuracy control, floating-point arithmetic, number systems},
	pages = {1609--1625},
}

@article{zurawski_design_1987,
	title = {Design of a high-speed square root multiply and divide unit},
	volume = {C-36},
	journal = {IEEE Transactions on Computers},
	author = {Zurawski, J. H. P. and Gosling, J. B.},
	year = {1987},
	keywords = {division, multiplication, square root},
	pages = {13--23},
}

@article{b._p._mcgovern_improved_1996,
	title = {Improved {Redundant} {Number} {System} {Based} {Multiply} {Accumulate} {Structure}},
	journal = {IEE Electronic Letters (to appear)},
	author = {{B. P. McGovern} and {R. F. Woods} and {C. McAllister}},
	year = {1996},
}

@article{c._t._fike_methods_1967,
	title = {Methods for {Evaluating} {Polynomial} {Approximations} in {Function} {Evaluation} {Routines}},
	volume = {10},
	number = {3},
	journal = {Communications of the ACM},
	author = {{C. T. Fike}},
	year = {1967},
	pages = {175--178},
}

@inproceedings{even_comparison_1999,
	address = {Los Alamitos, CA},
	title = {A {Comparison} of {Three} {Rounding} {Algorithms} for {IEEE} {Floating}-{Point} {Multiplication}},
	booktitle = {Proceedings of the 14th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press},
	author = {Even, Guy and Seidel, Peter-M.},
	editor = {{Koren} and {Kornerup}},
	month = apr,
	year = {1999},
	pages = {225--232},
}

@article{ercegovac_reciprocation_2000,
	title = {Reciprocation, {Square} {Root}, {Inverse} {Square} {Root} and {Some} {Elementary} {Functions} {Unsing} {Small} {Multipliers}},
	volume = {49},
	number = {7},
	journal = {IEEE Transactions on Computers},
	author = {Ercegovac, M. and Lang, T. and Muller, J. M. and Tisserand, A.},
	month = jul,
	year = {2000},
}

@article{daumas_modular_1995,
	title = {Modular {Range} {Reduction}: {A} {New} {Algorithm} for {Fast} and {Accurate} {Computation} of the {Elementary} {Functions}},
	volume = {1},
	number = {3},
	journal = {Journal of Universal Computer Science},
	author = {Daumas, M. and Mazenc, C. and Merrheim, X. and Muller, J. M.},
	month = mar,
	year = {1995},
	keywords = {accuracy control, elementary functions, floating-point arithmetic},
	pages = {162--175},
}

@inproceedings{daumas_fast_1994,
	address = {Atlanta, USA},
	title = {Fast and {Accurate} {Range} {Reduction} for {Computation} of the {Elementary} {Functions}},
	booktitle = {Proceedings of the 14th {IMACS} {World} {Congress} on {Computational} and {Applied} {Mathematics}},
	publisher = {IMACS, Piscataway, NJ,},
	author = {Daumas, M. and Mazenc, C. and Merrheim, X. and Muller, J. M.},
	year = {1994},
	keywords = {elementary functions},
	pages = {1196--1198},
}

@inproceedings{daumas_design_1993,
	address = {Windsor, Canada},
	title = {Design of a fast validated dot product operation},
	booktitle = {Proceedings of the 11th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Daumas, M. and Matula, D. W.},
	editor = {Swartzlander, E. E. and {M. J. Irwin} and {J. Jullien}},
	month = jun,
	year = {1993},
	keywords = {dot product},
	pages = {62--69},
}

@inproceedings{defour_new_2001,
	address = {Pacific Grove, California},
	title = {A {New} {Range} {Reduction} {Algorithm}},
	booktitle = {Proc. 35th {Asilomar} {Conference} on {Signals}, {Systems}, and},
	author = {Defour, D. and Kornerup, P. and Muller, J.-M. and Revol, N.},
	month = nov,
	year = {2001},
}

@inproceedings{delosme_cordic_1991,
	address = {Grenoble, France},
	title = {The {CORDIC} {Householder} algorithm},
	booktitle = {Proceedings of the 10th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Delosme, J. M. and Hsiao, S. F.},
	editor = {Kornerup, P. and Matula, D. W.},
	month = jun,
	year = {1991},
	keywords = {cordic},
	pages = {256--263},
}

@article{cotofana_signed_2000,
	title = {Signed {Digit} {Addition} and {Related} {Operations} with {Threshold} {Logic}},
	volume = {49},
	number = {3},
	journal = {IEEE Transactions on Computers},
	author = {Cotofana, Sorin and Vassiliadis, Stamatis},
	month = mar,
	year = {2000},
	pages = {193--207},
}

@article{cody_analysis_1987,
	title = {Analysis of proposals for the floating-point standard},
	volume = {20},
	number = {3},
	journal = {Computer},
	author = {Cody, W. J.},
	month = mar,
	year = {1987},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {floating-point arithmetic},
	pages = {63--68},
}

@article{cody_analysis_1981,
	title = {Analysis of proposals for the floating-point standard},
	journal = {Computer},
	author = {Cody, W. J.},
	month = mar,
	year = {1981},
	keywords = {floating-point arithmetic},
}

@article{cody_static_1973,
	title = {Static and dynamic numerical characteristics of floating-point arithmetic},
	volume = {C-22},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Cody, W. J.},
	month = jun,
	year = {1973},
	keywords = {accuracy control, floating-point arithmetic},
	pages = {598--601},
}

@article{clenshaw_beyond_1985,
	title = {beyond floating point},
	volume = {31},
	journal = {Journal of the ACM},
	author = {Clenshaw, C. W. and Olver, F. W. J.},
	year = {1985},
	keywords = {accuracy control, number systems},
	pages = {319--328},
}

@article{cox_single-chip_1989,
	title = {A {Single}-{Chip} {Public} {Key} {Encryption} {Subsystem}},
	volume = {24},
	number = {4},
	journal = {IEEE Journal of Solid-State Circuits},
	author = {Cox, A. L. and Hardbridge, J. R. and Ivey, P. A. and Oldfield, J. K.},
	year = {1989},
	keywords = {cryptography},
}

@inproceedings{cohen_specifications_1991,
	address = {Grenoble, France},
	title = {Specifications for a variable precision arithmetic coprocessor},
	booktitle = {Proceedings of the 10th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Cohen, M. S. and Hall, C. B. and Hull, T. E.},
	editor = {Kornerup, P. and Matula, D. W.},
	month = jun,
	year = {1991},
	keywords = {accuracy control, floating-point arithmetic},
	pages = {127--131},
}

@article{coonen_implementation_1980,
	title = {An implementation guide to a proposed standard for floating-point arithmetic},
	journal = {Computer},
	author = {Coonen, J. T.},
	month = jan,
	year = {1980},
	keywords = {floating-point arithmetic},
}

@article{cody_proposed_1985,
	title = {A proposed radix and word length independent standard for floating-point arithmetic},
	volume = {20},
	journal = {ACM SIGNUM Newsletter},
	author = {Cody, W. J.},
	month = jan,
	year = {1985},
	keywords = {floating-point arithmetic},
	pages = {37--51},
}

@article{cosnard_parallel_1986,
	title = {Parallel {QR} decomposition of a rectangular matrix},
	volume = {48},
	journal = {Numerische Mathematik},
	author = {Cosnard, M. and Muller, J. M. and Robert, Y.},
	year = {1986},
	pages = {239--249},
}

@inproceedings{cavallaro_floating-point_1988,
	title = {Floating-{Point} {CORDIC} for {Matrix} {Computations}},
	booktitle = {Proceedings of the 1988 {IEEE} {International} {Conference} on {Computer} {Design}},
	author = {Cavallaro, J. R. and Luk, F. T.},
	year = {1988},
	keywords = {cordic},
	pages = {40--42},
}

@article{chen_automatic_1972,
	title = {Automatic {Computation} of {Logarithms}, {Exponentials}, {Ratios} and {Square} {Roots}},
	volume = {16},
	journal = {IBM Journal of Research and Development},
	author = {Chen, T. C.},
	year = {1972},
	keywords = {division, exponential, logarithm, square root},
	pages = {380--388},
}

@inproceedings{cosnard_felin_1987,
	address = {Como, Italy},
	title = {The {FELIN} arithmetic coprocessor chip},
	booktitle = {Proceedings of the 8th {IEEE} {Symposium} on {Computer} {Arithmetic} ({Arith}-8)},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Cosnard, M. and {A.Guyot} and Hochet, B. and Muller, J. M. and Ouaouicha, H. and Paul, P. and Zysman, E.},
	editor = {Irwin, M. J. and Stefanelli, R.},
	month = may,
	year = {1987},
	keywords = {cordic, elementary functions, exponential, logarithm, shift-and-add algorithms},
}

@inproceedings{bannur_vlsi_1985,
	address = {Urbana, IL, USA},
	title = {The {VLSI} implementation of a square-root algorithm},
	booktitle = {Proceedings of the 7th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Bannur, J. and Varma, A.},
	month = jun,
	year = {1985},
	keywords = {square root},
	pages = {159--165},
}

@article{brown_simple_1981,
	title = {A simple but realistic model of floating-point computation},
	volume = {7},
	number = {4},
	journal = {ACM Transactions on Math. Software},
	author = {Brown, W. S.},
	month = dec,
	year = {1981},
	keywords = {accuracy control, floating-point arithmetic},
}

@article{brent_area-time_1981,
	title = {The area-time complexity of binary multiplication},
	volume = {28},
	number = {3},
	journal = {Journal of the ACM},
	author = {Brent, R. P. and Kung, H. T.},
	month = jul,
	year = {1981},
	keywords = {multiplication},
}

@article{baugh_twos_1973,
	title = {A two's complement parallel array multiplication algorithm},
	volume = {C-22},
	journal = {IEEE Transactions on Computers},
	author = {Baugh, C. R. and Wooley, B. A.},
	year = {1973},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {multiplication},
	pages = {1045--1047},
}

@article{brosnan_modular_1988,
	title = {Modular error detection for bit-serial multiplication},
	volume = {C-37},
	journal = {IEEE Transactions on Computers},
	author = {Brosnan, T. J. and Strader, N. R.},
	year = {1988},
	keywords = {bit-serial arithmetic, multiplication},
	pages = {1043--1052},
}

@article{brent_fast_1976,
	title = {Fast multiple precision evaluation of elementary functions},
	volume = {23},
	journal = {Journal of the ACM},
	author = {Brent, R. P.},
	year = {1976},
	keywords = {elementary functions},
	pages = {242--251},
}

@article{brent_precision_1973,
	title = {On the precision attainable with various floating point number systems},
	volume = {C-22},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Brent, R. P.},
	month = jun,
	year = {1973},
	keywords = {accuracy control, floating-point arithmetic},
	pages = {601--607},
}

@article{brent_addition_1970,
	title = {On the addition of binary numbers},
	volume = {C-19},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Brent, R. P.},
	month = aug,
	year = {1970},
	keywords = {addition},
}

@inproceedings{bose_fast_1987,
	address = {Como, Italy},
	title = {Fast multiply and divide for a {VLSI} floating-point unit},
	booktitle = {Proceedings of the 8th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Bose, B. K. and Patterson, D. A. and Pei, L. and Taylor, G. S.},
	year = {1987},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {division, floating-point arithmetic, multiplication},
}

@article{booth_signed_1951,
	title = {A signed binary multiplication technique},
	volume = {4},
	number = {2},
	journal = {Quarterly Journal of Mechanics and Applied Mathematics},
	author = {Booth, A. D.},
	year = {1951},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, Los Alamitos, CA, 1990},
	keywords = {multiplication},
	pages = {236--240},
}

@inproceedings{benouamer_lazy_1993,
	address = {Windsor, Canada},
	title = {A lazy exact arithmetic},
	booktitle = {Proceedings of the 11th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Benouamer, M. O. and Jaillon, P. and Michelucci, D. and Moreau, J. M.},
	editor = {Swartzlander, E. E. and {M. J. Irwin} and {J. Jullien}},
	month = jun,
	year = {1993},
	keywords = {compilation, exact arithmetic, Lazy arithmetic},
	pages = {242--249},
}

@inproceedings{bajard_vlsi_1993,
	title = {A {VLSI} circuit for on-line polynomial computing: application to exponential, trigonometric and hyperbolic functions},
	booktitle = {{VLSI93}, {Grenoble}},
	author = {Bajard, J. C. and Guyot, A. and Muller, J. M. and Skaf, A.},
	month = sep,
	year = {1993},
	keywords = {elementary functions, on-line arithmetic, polynomial approximations},
}

@inproceedings{bajard_-line_1992,
	title = {On-line approximation of real functions using polynomials},
	booktitle = {International conference on {Micro}-electronics, {Monastir}-92},
	author = {Bajard, J. C. and Guyot, A. and Muller, J. M. and Skaf, A.},
	year = {1992},
	keywords = {elementary functions, on-line arithmetic, polynomial approximations},
}

@article{bekooij_numerical_2000,
	title = {Numerical {Accuracy} of {Fast} {Fourier} {Transforms} with {CORDIC} {Arithmetic}},
	volume = {25},
	number = {2},
	journal = {Journal of VLSI Signal Processing Systems},
	author = {Bekooij, M. and Huisken, J. and Nowak, K.},
	month = jun,
	year = {2000},
	pages = {187--193},
}

@inproceedings{bennani_precise:_1988,
	address = {Paris, France},
	title = {{PRECISE}: simulation of round-off error propagation model},
	booktitle = {Proceedings of the 12th {World} {IMACS} {Congress}},
	author = {Bennani, M. and Brunet, M. C.},
	month = jul,
	year = {1988},
	keywords = {accuracy control, floating-point arithmetic, perturbation methods},
}

@article{antelo_high-performance_1997,
	title = {High-{Performance} {Rotation} {Architectures} {Based} on the {Radix}-4 {CORDIC} {Algorithm}},
	volume = {46},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Antelo, E. and Villalba, J. and Bruguera, J. D. and Zapata, E. L.},
	month = aug,
	year = {1997},
	pages = {855--870},
}

@article{arazi_architectures_1993,
	title = {Architectures for exponentiation over \${GF}(2{\textasciicircum}n)\$ adopted for smartcard application},
	volume = {C-42},
	number = {4},
	journal = {IEEE Transactions on Computers},
	author = {Arazi, B.},
	month = apr,
	year = {1993},
	keywords = {cryptography, finite fields},
	pages = {494--497},
}

@inproceedings{antelo_very-high_1999,
	address = {Los Alamitos, CA},
	title = {Very-{High} {Radix} {CORDIC} {Vectoring} with {Scalings} and {Selection} by {Rounding}},
	booktitle = {Proceedings of the 14th {IEEE} {Symposium} on {Computer} {Arithmetic} ({Adelaide}, {Australia})},
	publisher = {IEEE Computer Society Press},
	author = {Antelo, Elisardo and Lang, Tomas and Bruguera, Javier D.},
	editor = {{Koren} and {Kornerup}},
	month = apr,
	year = {1999},
	pages = {204--213},
}

@inproceedings{alverson_integer_1991,
	address = {Grenoble, France},
	title = {Integer division using reciprocals},
	booktitle = {Proceedings of the 10th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Alverson, R.},
	editor = {Kornerup, P. and Matula, D. W.},
	month = jun,
	year = {1991},
	keywords = {division},
	pages = {186--190},
}

@inproceedings{beaumont-smith_reduced_1999,
	address = {Los Alamitos, CA},
	title = {Reduced {Latency} {IEEE} {Floating}-{Point} {Standard} {Adder} {Architecture}},
	booktitle = {Proceedings of the 14th {IEEE} {Symposium} on {Computer} {Arithmetic} ({Adelaide}, {Australia})},
	publisher = {IEEE Computer Society Press},
	author = {Beaumont-Smith, A. and Burgess, N. and Lefrere, D. and Lim, C. C.},
	editor = {{Koren} and {Kornerup}},
	month = apr,
	year = {1999},
	pages = {35--42},
}

@article{banerji_novel_1974,
	title = {A novel implementation method for addition and subtraction in residue number systems},
	volume = {C-23},
	number = {1},
	journal = {IEEE Transactions on Computers},
	author = {Banerji, D. K.},
	month = jan,
	year = {1974},
	keywords = {residue number systems},
	pages = {106--108},
}

@article{baker_suggestion_1976,
	title = {Suggestion for a fast binary sine/cosine generator},
	volume = {C-25},
	number = {11},
	journal = {IEEE Transactions on Computers},
	author = {Baker, P. W.},
	month = nov,
	year = {1976},
	keywords = {cordic, elementary functions, trigonometric functions},
}

@article{avizienis_arithmetic_1973,
	title = {Arithmetic algorithms for error-coded operands},
	volume = {C-22},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Avizienis, A.},
	month = jun,
	year = {1973},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {error-tolerant arithmetic},
	pages = {567--572},
}

@article{avizienis_signed-digit_1961,
	title = {Signed-digit number representations for fast parallel arithmetic},
	volume = {10},
	journal = {IRE Transactions on electronic computers},
	author = {Avizienis, A.},
	year = {1961},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 2, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {redundant number systems},
	pages = {389--400},
}

@article{antelo_very-high_2000,
	title = {Very-{High} {Radix} {CORDIC} {Rotation} {Based} on {Selection} by {Rounding}},
	volume = {25},
	number = {2},
	journal = {Journal of VLSI Signal Processing Systems},
	author = {Antelo, Elisardo and Lang, Tomas and Bruguera, Javier D.},
	month = jun,
	year = {2000},
	pages = {141--154},
}

@article{antelo_very-high_2000-1,
	title = {Very-{High} {Radix} {Circular} {CORDIC}: {Vectoring} and {Unified} {Rotation}/{Vectoring}},
	volume = {49},
	number = {7},
	journal = {IEEE Transactions on Computers},
	author = {Antelo, Elisardo and Lang, Tomas and Bruguera, Javier D.},
	month = jul,
	year = {2000},
	pages = {727--739},
}

@book{aho_design_1974,
	title = {The design and analysis of computer algorithms},
	publisher = {Addison Wesley, Reading, MA},
	author = {Aho, A. V. and Hopcroft, J. E. and Ullman, J. D.},
	year = {1974},
	keywords = {multiplication},
}

@inproceedings{ahmed_efficient_1989,
	address = {Santa Monica, USA},
	title = {Efficient elementary function generation with multipliers},
	booktitle = {Proceedings of the 9th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society Press, Los Alamitos, CA},
	author = {Ahmed, H. M.},
	year = {1989},
	keywords = {elementary functions},
	pages = {52--59},
}

@article{agrawal_high-speed_1979,
	title = {High-speed arithmetic arrays},
	volume = {C-28},
	number = {3},
	journal = {IEEE Transactions on Computers},
	author = {Agrawal, D. P.},
	month = mar,
	year = {1979},
	keywords = {division},
	pages = {215--224},
}

@article{anderson_ibm_1967,
	title = {The {IBM} 360/370 model 91: floating-point execution unit},
	journal = {IBM Journal of Research and Development},
	author = {Anderson, S. F. and Earle, J. G. and Goldschmidt, R. E. and Powers, D. M.},
	month = jan,
	year = {1967},
	note = {Reprinted in E. E. Swartzlander, {\textbackslash}em Computer Arithmetic{\textbackslash}/, Vol. 1, IEEE Computer Society Press Tutorial, Los Alamitos, CA, 1990},
	keywords = {division, floating-point arithmetic, multiplication},
}

@article{ahmed_highly_1982,
	title = {Highly concurrent computing structures for matrix arithmetic and signal processing},
	volume = {15},
	number = {1},
	journal = {Computer},
	author = {Ahmed, H. M. and Delosme, J. M. and Morf, M.},
	month = jan,
	year = {1982},
	keywords = {cordic},
	pages = {65--82},
}

@inproceedings{arnold_arithmetic_1997,
	address = {Los Alamitos, CA},
	title = {Arithmetic {Co}-{Transformations} in the {Real} and {Complex} {Logarithmic} {Number} {Systems}},
	booktitle = {Proceedings of the 13th {IEEE} {Symposium} on {Computer} {Arithmetic} ({Asilomar}, {California})},
	publisher = {IEEE Computer Society Press},
	author = {Arnold, Mark G. and Bailey, Thomas A. and Cowles, John R. and Winkel, Mark D.},
	year = {1997},
	pages = {190--199},
}

@article{marasa_simulative_1973,
	title = {A {Simulative} {Study} of {Correlated} {Error} {Propagation} in {Various} {Finite}-{Precision} {Arithmetics}},
	volume = {22},
	issn = {0018-9340},
	url = {http://dx.doi.org/10.1109/TC.1973.5009111},
	doi = {10.1109/TC.1973.5009111},
	abstract = {The accumulated roundoff error incurred in long arithmetic computations involving a randomized mixture of addition, subtraction, multiplication, and division operations applied to an initial randomly generated data base is studied via simulation. Truncated and rounded floating-point arithmetic and truncated and rounded logarithmic arithmetic are simultaneously utilized for each of the computation sequences and the resulting roundoff error accumulations for these four systems are compared. The nature of the correlated errors incurred under various arithmetic operator mixes are discussed.},
	number = {6},
	urldate = {2015-11-30},
	journal = {IEEE Trans. Comput.},
	author = {Marasa, John D. and Matula, David W.},
	month = jun,
	year = {1973},
	keywords = {Floating-point arithmetic, logarithmic arithmetic, Accumulated roundoff error, correlated error, simulation study},
	pages = {587--597},
}

@inproceedings{walters_efficient_2005,
	address = {Washington, DC, USA},
	series = {{ARITH} '05},
	title = {Efficient {Function} {Approximation} {Using} {Truncated} {Multipliers} and {Squarers}},
	isbn = {0-7695-2366-8},
	url = {http://dx.doi.org/10.1109/ARITH.2005.18},
	doi = {10.1109/ARITH.2005.18},
	abstract = {This paper presents a technique for designing linear and quadratic interpolators for function approximation using truncated multipliers and squarers. Initial coefficient values are found using a Chebyshev series approximation, and then adjusted through exhaustive simulation to minimize the maximum absolute error of the interpolator output. This technique is suitable for any function and any precision up to 24-bits (IEEE single precision). Designs for linear and quadratic interpolators that implement the reciprocal function, f(x) = 1/x, are presented and analyzed as an example. We show that a 24-bit truncated reciprocal quadratic interpolator with a design specification of ┬▒1 ulp error requires 24.1\% fewer partial products to implement than a comparable standard interpolator with the same error specification.},
	urldate = {2015-11-26},
	booktitle = {Proceedings of the 17th {IEEE} {Symposium} on {Computer} {Arithmetic}},
	publisher = {IEEE Computer Society},
	author = {Walters, George E.},
	year = {2005},
	pages = {232--239},
}

@article{walters_linear_2015,
	title = {Linear and {Quadratic} {Interpolators} {Using} {Truncated}-{Matrix} {Multipliers} and {Squarers}},
	volume = {4},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	url = {http://www.mdpi.com/2073-431X/4/4/293},
	doi = {10.3390/computers4040293},
	abstract = {This paper presents a technique for designing linear and quadratic interpolators for function approximation using truncated multipliers and squarers. Initial coefficient values are found using a Chebyshev-series approximation and then adjusted through exhaustive simulation to minimize the maximum absolute error of the interpolator output. This technique is suitable for any function and any precision up to 24 bits (IEEE single precision). Designs for linear and quadratic interpolators that implement the 1/x, 1/┬áΓêÜ x, log2(1+2x), log2(x) and 2x functions are presented and analyzed as examples. Results show that a proposed 24-bit interpolator computing 1/x with a design specification of ┬▒1 unit in the last place of the product (ulp) error uses 16.4\% less area and 15.3\% less power than a comparable standard interpolator with the same error specification. Sixteen-bit linear interpolators for other functions are shown to use up to 17.3\% less area and 12.1\% less power, and 16-bit quadratic interpolators are shown to use up to 25.8\% less area and 24.7\% less power.},
	language = {en},
	number = {4},
	urldate = {2015-11-26},
	journal = {Computers},
	author = {Walters, George E.},
	month = nov,
	year = {2015},
	keywords = {truncated multiplier, function approximation, linear and quadratic interpolator, truncated squarer},
	pages = {293--321},
}

@inproceedings{ingemarsson_using_2011,
	title = {On using the logarithmic number system for finite wordlength matrix inversion},
	isbn = {978-1-61284-856-3},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6026264},
	doi = {10.1109/MWSCAS.2011.6026264},
	urldate = {2015-07-05},
	publisher = {IEEE},
	author = {Ingemarsson, Carl and Gustafsson, Oscar},
	month = aug,
	year = {2011},
	keywords = {logarithmic number system, digital arithmetic, finite wordlength matrix inversion, fixed-point number system, matrix inversion, wordlength-error trade-offs},
	pages = {1--4},
}

@article{bruintjes_sabrewing:_2012,
	title = {Sabrewing: {A} {Lightweight} {Architecture} for {Combined} {Floating}-point and {Integer} {Arithmetic}},
	volume = {8},
	issn = {1544-3566},
	shorttitle = {Sabrewing},
	url = {http://doi.acm.org/10.1145/2086696.2086720},
	doi = {10.1145/2086696.2086720},
	abstract = {In spite of the fact that floating-point arithmetic is costly in terms of silicon area, the joint design of hardware for floating-point and integer arithmetic is seldom considered. While components like multipliers and adders can potentially be shared, floating-point and integer units in contemporary processors are practically disjoint. This work presents a new architecture which tightly integrates floating-point and integer arithmetic in a single datapath. It is mainly intended for use in low-power embedded digital signal processors and therefore the following design constraints were important: limited use of pipelining for the convenience of the compiler; maintaining compatibility with existing technology; minimal area and power consumption for applicability in embedded systems. The architecture is tailored to digital signal processing by combining floating-point fused multiply-add and integer multiply-accumulate. It could be deployed in a multi-core system-on-chip designed to support applications with and without dominance of floating-point calculations. The VHDL structural description of this architecture is available for download under BSD license. Besides being configurable at design time, it has been thoroughly checked for IEEE-754 compliance by means of a floating-point test suite originating from the IBM Research Labs. A proof-of-concept has also been implemented using STMicroelectronics 65nm technology. This prototype supports 32-bit signed two's complement integers and 41-bit (8-bit exponent and 32-bit significand) floating-point numbers. Our evaluations show that over 67\% energy and 19\% area can be saved compared to a reference design in which floating-point and integer arithmetic are implemented separately. The area overhead caused by combining floating-point and integer is less than 5\%. Implemented in ST's general-purpose CMOS technology, the design can operate at a frequency of 1.35GHz, while 667MHz can be achieved in low-power CMOS. Considering that the entire datapath is partitioned in just three pipeline stages, and the fact that the design is intended for use in the low-power domain, these frequencies are adequate. They are in fact competitive with current technology low-power floating-point units. Post-layout estimates indicate that the required area of a low-power implementation can be as small as 0.04mm2. Power consumption is on the order of several milliwatts. Strengthened by the fact that clock gating could reduce power consumption even further, we think that a shared floating-point and integer architecture is a good choice for signal processing in low-power embedded systems.},
	number = {4},
	urldate = {2015-10-30},
	journal = {ACM Trans. Archit. Code Optim.},
	author = {Bruintjes, Tom M. and Walters, Karel H. G. and Gerez, Sabih H. and Molenkamp, Bert and Smit, Gerard J. M.},
	month = jan,
	year = {2012},
	keywords = {Digital signal processing, embedded systems, area, datapath, floating-point, fused multiply-add (fma), integer, low-power, multiply-accumulate (mac), pipeline},
	pages = {41:1--41:22},
}

@misc{bruintjes_design_2011,
	type = {Master's {Thesis}},
	title = {Design of a {Fused} {Multiply}-{Add} {Floating}-{Point} and {Integer} {Datapath}},
	url = {http://eprints.eemcs.utwente.nl/20466/},
	abstract = {In spite of the fact that floating-point arithmetic is costly in terms of silicon area, the joint design of hardware for floating-point and integer arithmetic is seldom considered. While components like multipliers and adders can potentially be shared, floating-point and integer units in contemporary processors are practically disjoint. This work presents a new architecture which tightly integrates floating-point and integer arithmetic in a single datapath. An important design constraint was that pipelining should be kept to a minimum for the convenience of the compiler. The resulting architecture is based on a combination of floating-point fused multiply-add and integer multiply-accumulate making it especially suitable for digital signal processing. It could be deployed in a multi-core system-on-chip designed to support both applications with and without dominance of floating-point calculations.},
	urldate = {2015-10-30},
	author = {Bruintjes, T. M.},
	month = may,
	year = {2011},
}

@book{walters_versatile_2013,
	title = {Versatile {Architectures} for {Onboard} {Payload} {Signal} {Processing}},
	isbn = {978-90-365-0850-6},
	language = {en},
	publisher = {University of Twente},
	author = {Walters, Karel Hubertus Gerardus},
	year = {2013},
}

@inproceedings{eilert_efficient_2007,
	title = {Efficient {Complex} {Matrix} {Inversion} for {MIMO} {Software} {Defined} {Radio}},
	doi = {10.1109/ISCAS.2007.377850},
	abstract = {Complex matrix inversion is a very computationally demanding operation in advanced multi-antenna wireless communications. Traditionally, systolic array-based QR decomposition (QRD) is used to invert large matrices. However, the matrices involved in MIMO baseband processing in mobile handsets are generally small which means QRD is not necessarily efficient. In this paper, a new method is proposed using programmable hardware units which not only achieves higher performance but also consumes less silicon area. Furthermore, the hardware can be reused for many other operations such as complex matrix multiplication, filtering, correlation and FFT/IFFT.},
	booktitle = {{IEEE} {International} {Symposium} on {Circuits} and {Systems}, 2007. {ISCAS} 2007},
	author = {Eilert, J. and Wu, Di and Liu, D.},
	month = may,
	year = {2007},
	keywords = {Hardware, Filtering, Mobile handsets, systolic arrays, matrix inversion, Baseband, complex matrix inversion, Matrix decomposition, MIMO, MIMO communication, MIMO software defined radio, programmable hardware units, Silicon, silicon area, software radio, Wireless communication},
	pages = {2610--2613},
}

@book{golub_matrix_2012,
	title = {Matrix {Computations}},
	isbn = {978-1-4214-0859-0},
	abstract = {The fourth edition of Gene H. Golub and Charles F. Van Loan's classic is an essential reference for computational scientists and engineers in addition to researchers in the numerical linear algebra community. Anyone whose work requires the solution to a matrix problem and an appreciation of its mathematical properties will find this text useful and engaging. This revision is a cover-to-cover expansion and renovation of the third edition. It now includes an introduction to tensor computations and brand new sections on ΓÇó fast transformsΓÇó parallel LUΓÇó discrete Poisson solversΓÇó pseudospectraΓÇó structured linear equation problemsΓÇó structured eigenvalue problemsΓÇó large-scale SVD methodsΓÇó polynomial eigenvalue problems  Matrix Computations is packed with challenging problems, insightful derivations, and pointers to the literatureΓÇöeverything needed to become a matrix-savvy developer of numerical methods and software.},
	language = {en},
	publisher = {JHU Press},
	author = {Golub, Gene H. and Loan, Charles F. Van},
	month = dec,
	year = {2012},
	keywords = {Mathematics / Applied, Mathematics / General},
}

@inproceedings{santoro_rounding_1989,
	title = {Rounding algorithms for {IEEE} multipliers},
	doi = {10.1109/ARITH.1989.72824},
	abstract = {Several technology independent rounding algorithms for multiplying normalized numbers are presented. The first is a simple rounding algorithm suitable for software simulation or moderate performance hardware multipliers. The next two algorithms are parallel addition schemes suitable for high-performance VLSI multipliers. One of them eliminates the carry produced by the lower-order bits from the critical path. Several methods for computing the sticky bit are also presented. Included is a new fast and efficient technique for computing the sticky bit directly from the carry-save form without undergoing the expense of a carry-propagate addition},
	booktitle = {, {Proceedings} of 9th {Symposium} on {Computer} {Arithmetic}, 1989},
	author = {Santoro, M.R. and Bewick, G. and Horowitz, M.A.},
	month = sep,
	year = {1989},
	keywords = {Hardware, digital arithmetic, Floating-point arithmetic, multiplying circuits, Application software, Very large scale integration, VLSI, Computational modeling, Digital systems, Roundoff errors, coprocessors, carry-propagate addition, IEEE multipliers, multiplying normalized numbers, performance hardware multipliers, rounding algorithms, Software algorithms, Software performance, software simulation, Software standards},
	pages = {176--183},
}

@inproceedings{arnold_single-multiplier_2001,
	title = {A {Single}-{Multiplier} {Quadratic} {Interpolator} for {LNS} {Arithmetic}},
	abstract = {Abstract Linear interpolation requires a single multiplication but is significantly less accurate than quadratic interpolation. The latter requires two multiplications. Two novel quadratic interpolation schemes are shown here that approximate the functions required by the Logarithmic Number System (LNS) with more accuracy than linear interpolation using only a single multiplication. One method uses two ROMs to give the accuracy of quadratic interpolation, whilst the other uses one ROM to give four- to six-bits better accuracy than linear interpolation. These techniques save four- to eight-fold on memory compared to linear interpolation for the same accuracy. We illustrate the usefulness of these techniques for serial implementation with a clone of the ARM TM microprocessor (known as AWE) that we developed to have LNS instructions.},
	booktitle = {Proc. 2001 {IEEE} {Intl}. {Conf}. on {Computer} {Design}: {ICCD} 2001},
	author = {Arnold, Mark G. and Winkel, Mark D.},
	year = {2001},
	keywords = {Hardware, Interpolation, Table lookup, logarithmic number system, Polynomials, fixed point arithmetic, Floating-point arithmetic, Read only memory, multiplication, Roundoff errors, Cloning, fixed-point logarithm, linear interpolation, Microprocessors, Propagation delay, quadratic interpolation},
	pages = {178--183},
}

@article{volkov_logarithmic_1992,
	title = {The logarithmic number system in control algorithms and information processing},
	volume = {30},
	issn = {0882-4002},
	url = {http://cat.inist.fr/?aModele=afficheN&cpsidt=5375035},
	language = {eng},
	number = {1},
	urldate = {2015-10-17},
	journal = {Soviet journal of computer and systems sciences},
	author = {Volkov, V. L. and Pakshin, P. V.},
	year = {1992},
	pages = {132--138},
}

@inproceedings{vandrunen_32-bit_1995,
	title = {A 32-bit complex-arithmetic integer logic unit with dynamic accuracy},
	doi = {10.1109/CICC.1995.518132},
	abstract = {A pipelined 32-bits integer arithmetic unit with dynamic accuracy is described, that supports addition/subtraction, multiplication/division, power/root and a number of mixed operations such as sum of squares directly in hardware, and is easily extended for floating-point and adaptive accuracy computations. In a 0.8 ╬╝m CMOS technology, this module houses 3k transistors on a 2.5 mm2 area and operates at about 100 MHz external clock},
	booktitle = {Custom {Integrated} {Circuits} {Conference}, 1995., {Proceedings} of the {IEEE} 1995},
	author = {vanDrunen, R. and Diepenhorst, M. and Poppinga, G. and Spaanenburg, L.},
	month = may,
	year = {1995},
	keywords = {Encoding, Hardware, Interpolation, Table lookup, floating point arithmetic, CMOS logic circuits, CMOS technology, Floating-point arithmetic, addition, subtraction, division, multiplication, Clocks, Logic, Decoding, pipeline arithmetic, 100 MHz, floating-point, 0.8 micron, 32 bit, complex-arithmetic integer logic unit, dynamic accuracy, pipelined unit, Writing},
	pages = {33--36},
}

@inproceedings{etzel_logarithmic_1983,
	title = {Logarithmic addition for digital signal processing applications},
	publisher = {IEEE},
	author = {Etzel, Mark},
	year = {1983},
	pages = {694--697},
}

@article{softley_unpublished:_nodate,
	title = {Unpublished: {Improved} {Techniques} for {Logarithmic} {Arithmetic}},
	author = {Softley, Chris},
}

@article{arnold_initializing_1992,
	title = {Initializing {RAM}-based logarithmic processors},
	volume = {4},
	issn = {0922-5773},
	url = {http://link.springer.com/article/10.1007/BF00925125},
	doi = {10.1007/BF00925125},
	abstract = {A logarithmic processor is proposed that uses external RAM for holding the table required for logarithmic subtraction. The proposed processor requires that the RAM be initialized before any computations occur. We give an algorithm to initialize the RAM using the limited arithmetic unit of the processor. The algorithm is ten times faster than a bit by bit computation of the logarithm and antilogarithm. Bounds are developed for comparing the error of this algorithm against the error of earlier algorithms. Simulation results show that this algorithm avoids catastrophic cancellation, and is as accurate as any previously known single precision algorith.},
	language = {en},
	number = {2-3},
	urldate = {2015-10-17},
	journal = {Journal of VLSI signal processing systems for signal, image and video technology},
	author = {Arnold, M. G. and Bailey, T. A. and Cowles, J. R. and Cupal, J. J.},
	month = may,
	year = {1992},
	keywords = {Circuits and Systems, Computer Imaging, Vision, Pattern Recognition and Graphics, Electrical Engineering, Image Processing and Computer Vision, Pattern Recognition, Signal, Image and Speech Processing},
	pages = {243--252},
}

@inproceedings{neuvo_logarithmic_1985,
	address = {Prague},
	title = {Logarithmic arithmetic in {FIR} filters},
	author = {Neuvo, Y. and Vainio, O.},
	year = {1985},
	keywords = {LNS, core, filter},
	pages = {541},
}

@article{arnold_unpublished:_nodate-2,
	title = {Unpublished: {Implementing} the {Residue} {Logarithmic} {Number} {System} using {Interpolation} and {Cotransformation}},
	author = {Arnold, M. G.},
}

@inproceedings{arnold_design_2001,
	title = {Design of a faithful {LNS} interpolator},
	doi = {10.1109/DSD.2001.952321},
	abstract = {A design is given for a quadratic interpolator needed by the logarithmic number system (LNS). Unlike previous LNS designs that have attempted to produce results consistently better than a floating-paint representation of the same word size (32 bits), the design goal is to minimize memory requirements and system complexity, at the expense of a slight increase in approximation error. Simulation results have shown this goal causes only a modest impact on overall accuracy, but the memory savings are significant. Despite a slight increase in error compared to prior LNS implementations, on average, the error is still less than conventional number representations satisfying the IEEE-754 standard. Proposed applications for the interpolator include multimedia, signal processing, graphics and reconfigurable computing},
	booktitle = {Euromicro {Symposium} on {Digital} {Systems} {Design}, 2001. {Proceedings}},
	author = {Arnold, M.G.},
	year = {2001},
	keywords = {Interpolation, logarithmic number system, digital arithmetic, Signal processing, Floating-point arithmetic, Application software, Computer errors, Signal processing algorithms, simulation, Graphics, Approximation error, Costs, Computer graphics, Computer industry, faithful LNS interpolator design, IEEE-754 standard, Manufacturing industries, memory requirements, multimedia, multimedia computing, quadratic interpolator, reconfigurable computing, system complexity},
	pages = {336--345},
}

@inproceedings{arnold_reconfiguring_2001,
	title = {Reconfiguring an {FPGA}-based {RISC} for {LNS} arithmetic},
	url = {http://proceedings.spiedigitallibrary.org/proceeding.aspx?articleid=896199},
	doi = {10.1117/12.434371},
	urldate = {2015-10-17},
	author = {Arnold, Mark G. and Winkel, Mark D.},
	month = jul,
	year = {2001},
	pages = {88--98},
}

@inproceedings{arnold_unrestricted_2001,
	title = {Unrestricted faithful rounding is good enough for some {LNS} applications},
	doi = {10.1109/ARITH.2001.930125},
	abstract = {We propose to relax the restricted form of faithful rounding used in prior 32 bit logarithmic number system (LNS) implementations. Unrestricted faithful rounding yields three- to six-fold savings in VLSI ROM size (or four- to six-fold savings in FPGA table size) with only a modest increase in error. This can be acceptable for the DSP and multimedia applications in which the non-standard LNS is a candidate for adoption. Such applications are cost sensitive, and the tremendous cost reduction of the LNS model proposed should argue very favourably for its adoption},
	booktitle = {15th {IEEE} {Symposium} on {Computer} {Arithmetic}, 2001. {Proceedings}},
	author = {Arnold, M.G. and Walter, C.},
	year = {2001},
	keywords = {logarithmic number system, digital arithmetic, Signal processing, Digital signal processing, Very large scale integration, VLSI, Read only memory, Fixed-point arithmetic, Control systems, Process control, Costs, DSP applications, 32 bit, multimedia computing, cost reduction, Dynamic range, FPGA table size, Iron, multimedia applications, unrestricted faithful rounding, VLSI ROM size},
	pages = {237--246},
}
